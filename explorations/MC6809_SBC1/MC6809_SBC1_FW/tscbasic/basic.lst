0001                         * MICRO BASIC PLUS SOURCE LISTING
0002                         *
0003                         * MICRO BASIC PLUS
0004                         * COPYRIGHT (C) 1976 BY
0005                         *
0006                         * TECHNICAL SYSTEMS CONSULTANTS
0007                         * BOX 2574
0008                         * W. LAFAYETTE INDIANA 47906
0009                         *
0010                         * Ported to 6809 Single Board computer by
0011                         * Jeff Tranter <tranter@pobox.com>
0012                         
0013                         	opt	l
0014                         	opt	s19
0015                         
0016                         * EQUATES
0017 7fff                    STACK	EQU	$7FFF
0018 6f00                    EXTERN	EQU	$6F00	; Outside of memory used by BASIC
0019 f837                    MONITR	EQU	$F837	; Go to ASSIST09
0020 1e00                    STKBOT	EQU	$1E00
0021                         
0022                         ; ASSIST09 SWI call numbers
0023                         
0024 0000                    A_INCHNP EQU	0	; INPUT CHAR IN A REG - NO PARITY
0025 0001                    A_OUTCH  EQU	1	; OUTPUT CHAR FROM A REG
0026 0009                    A_VCTRSW EQU	9	; Vector swap
0027 0032                    .ECHO	EQU	50	; Secondary command list
0028                         
0029                         * TEMPORARY STORAGE
0030                         
0031 0000                    RNDM	RMB	4
0032 0004                    BUFPNT	RMB	2
0033 0006                    FORSTK	RMB	2
0034 0008                    DIMPNT	RMB	2
0035 000a                    XTEMP3	RMB	2
0036 000c                    DATAST	RMB	2
0037 000e                    DATAPT	RMB	2
0038 0010                    TRYVAL	RMB	2
0039 0012                    CRFLAG	RMB	1
0040 0013                    QMFLAG	RMB	1
0041 0014                    ROWVAR	RMB	1
0042 0015                    ROWCON	RMB	1
0043 0016                    COLCON	RMB	1
0044 0017                    TABFLG	RMB	1
0045 0018                    DIMFLG	RMB	1
0046 0019                    RUNFLG	RMB	1
0047 001a                    DATAFL	RMB	1
0048 001b                    SUBCNT	RMB	1
0049 001c                    LETFLG	RMB	1
0050 001d                    FLDCNT	RMB	1
0051 001e                    NXPNTR	RMB	2
0052 0020                    XTEMP	RMB	2
0053 0022                    XSAVE	RMB	2
0054 0024                    XSAVE2	RMB	2
0055 0026                    NUMCNT	RMB	1
0056 0027                    NEGFLG	RMB	1
0057 0028                    NOEXFL	RMB	1
0058 0029                    EXTRA	RMB	2
0059 002b                    COUNT	RMB	1
0060 002c                    STKCNT	RMB	1
0061 002d                    AUXCNT	RMB	1
0062 002e                    SIGN	RMB	1
0063 002f                    AXSIGN	RMB	1
0064 0030                    OVFLBF	RMB	1
0065 0031                    XTEMP2	RMB	2
0066 0033                    XTEMP4	RMB	2
0067 0035                    XTEMP5	RMB	2
0068 0037                    CPX1	RMB	2
0069 0039                    CPX2	RMB	2
0070 003b                    STKEND	RMB	3
0071 003e                    CHRCNT	RMB	1
0072 003f                    OPSTAK	RMB	32
0073 005f                    AC	RMB	3
0074 0062                    NUMBER	RMB	3
0075 0065                    AX	RMB	3
0076 0068                    BUFFER	RMB	72
0077                         
0078                         * LABEL TABLE
0079                         
0080 00b0                    LBLTBL	RMB	78
0081 00fe                    STKTOP	RMB	2
0082                         
0083                         * CONSTANTS
0084                         
0085 0008                    BACKSP	EQU	$8
0086 0018                    DELCOD	EQU	$18
0087 0021                    PRMPTC	EQU	'!
0088                         
0089 0100                    	ORG	$0100
0090                         
0091                         * MAIN PROGRAM
0092                         
0093 0100 7e 01 b6           START	JMP	MICBAS	; JMP TO BEGIN
0094 0103 7e 01 c0           RESTRT	JMP	FILBUF
0095                         
0096                         * EXTERNAL I-O ROUTINES
0097                         
0098                         ; OUTEEE is a jump to the output routine in MIKBUG (character in
0099                         ; accumulator A, other registers undisturbed), and is at location 0106.
0100                         ; If MIKBUG is not used, this should be patched to vector to your
0101                         ; routine.
0102                         
0103 0106 3f                 OUTEEE	SWI		; Call ASSIST09 monitor function
0104 0107 01                 	FCB	A_OUTCH	; Service code byte
0105 0108 39                 	RTS
0106                         
0107                         ; Get character from the console
0108                         ; A contains character read. Blocks until key pressed. Character may
0109                         ; be echoed depending on echo flag. Ignores NULL ($00) and RUBOUT
0110                         ; ($7F). CR ($OD) is converted to LF ($0A).
0111                         ; Registers changed: none (flags may change). Returns char in A.
0112 0109 3f                 INCH	SWI		; Call ASSIST09 monitor function
0113 010a 00                 	FCB	A_INCHNP ; Service code byte
0114 010b 39                 	RTS
0115                         
0116 010c 7e 04 85           BREAK	JMP	INTBRK
0117 010f 6e ff              MEMEND	FDB	$6EFF
0118                         
0119                         * KEYWORD AND JUMP TABLE
0120                         
0121 0111 50 52 49           KEYTBL	FCC	;PRI;
0122 0114 06 ac              	FDB	PRINT
0123                         
0124 0116 49 4e 50           	FCC	;INP;
0125 0119 09 e4              	FDB	INPUT
0126                         
0127 011b 49 46 20           	FCC	;IF ;
0128 011e 0b 10              	FDB	IF
0129                         
0130 0120 4c 45 54           	FCC	;LET;
0131 0123 09 ba              LETADR	FDB	LET
0132                         
0133 0125 46 4f 52           	FCC	;FOR;
0134 0128 0b e9              	FDB	FOR
0135                         
0136 012a 4e 45 58           	FCC	;NEX;
0137 012d 0c 15              	FDB	NEXT
0138                         
0139 012f 47 4f 54           	FCC	;GOT;
0140 0132 09 c9              	FDB	GOTO
0141                         
0142 0134 47 4f 53           	FCC	;GOS;
0143 0137 0b 94              	FDB	GOSUB
0144                         
0145 0139 4f 4e 20           	FCC	;ON ;
0146 013c 0a d0              	FDB	ONGOTO
0147                         
0148 013e 52 45 54           	FCC	;RET;
0149 0141 0b c0              	FDB	RETURN
0150                         
0151 0143 52 45 41           	FCC	;REA;
0152 0146 0a 7a              	FDB	READ
0153                         
0154 0148 44 41 54           	FCC	;DAT;
0155 014b 0a 6b              	FDB	DATA
0156                         
0157 014d 52 45 53           	FCC	;RES;
0158 0150 0a c6              	FDB	RESTOR
0159                         
0160 0152 44 49 4d           	FCC	;DIM;
0161 0155 08 9b              	FDB	DIM
0162                         
0163 0157 45 58 54           	FCC	;EXT;
0164 015a 09 41              	FDB	EXTRNL
0165                         
0166 015c 4d 4f 4e           	FCC	;MON;
0167 015f f8 37              	FDB	MONITR
0168                         
0169 0161 45 4e 44           	FCC	;END;
0170 0164 01 c0              	FDB	FILBUF
0171                         
0172 0166 52 45 4d           	FCC	;REM;
0173 0169 09 44              	FDB	RUNEXC
0174                         
0175 016b 52 55 4e           	FCC	;RUN;
0176 016e 09 a8              	FDB	RUN
0177                         
0178 0170 4c 49 53           	FCC	;LIS;
0179 0173 04 1c              	FDB	LIST
0180                         
0181 0175 53 43 52           	FCC	;SCR;
0182 0178 01 b6              	FDB	MICBAS
0183 017a 00                 	FCB	0
0184                         
0185 017b 52 4e 44           FCTTBL	FCC	;RND;
0186 017e 0d 58              	FDB	EVAL88
0187                         
0188 0180 41 42 53           	FCC	;ABS;
0189 0183 0d 54              	FDB	EVAL85
0190                         
0191 0185 53 47 4e           	FCC	;SGN;
0192 0188 0d 4b              	FDB	EVAL86
0193 018a 00                 	FCB	0
0194                         
0195                         * INITIALIZATION
0196                         
0197 018b 34 12              ECHOOFF	PSHS	A,X	; Save registers
0198 018d 8e ff ff           	LDX	#$FFFF	; New echo value (off)
0199 0190 86 32              	LDA	#.ECHO	; Load subcode for vector swap
0200 0192 3f                 	SWI		; Request service
0201 0193 09                 	FCB	A_VCTRSW ; Service code byte
0202 0194 35 12              	PULS	A,X	; Save registers
0203 0196 39                 	RTS		; Return to monitor
0204                         
0205 0197 bd 01 8b           CLRBEG	JSR	ECHOOFF	; Turn off echo
0206 019a 8e 01 00           	LDX	#START
0207 019d 9f 0a              	STX	XTEMP3	; SAVE X
0208 019f 8e 00 0c           CLRBG2	LDX	#DATAST	; SET START
0209 01a2 20 08              	BRA	CLEAR	; GO CLEAR
0210                         
0211 01a4 be 01 0f           CLREND	LDX	MEMEND	; SET END
0212 01a7 9f 0a              	STX	XTEMP3	; SAVE
0213 01a9 be 10 27           	LDX	ENDSTR
0214 01ac 4f                 CLEAR	clra		; CLEAR ACC.
0215 01ad a7 84              CLEAR2	sta	0,X	; CLEAR BYTE
0216 01af 30 01              	leax	1,x	; BUMP THE POINTER
0217 01b1 9c 0a              	CPX	XTEMP3	; DONE?
0218 01b3 26 f8              	BNE	CLEAR2
0219 01b5 39                 	RTS		; RETURN
0220                         
0221 01b6 8d df              MICBAS	BSR	CLRBEG	; GO CLEAR
0222 01b8 8e 10 29           	LDX	#STORSP
0223 01bb bf 10 27           	STX	ENDSTR	; SET END STORAGE:
0224 01be 8d e4              	BSR	CLREND	; GO CLEAR
0225                         
0226                         * GET LINE INTO INPUT BUFFER
0227                         
0228                         FILBUF	;LDX	#RESTRT
0229                         	;STX	MONPC	; SET UP RETURN POINTER
0230 01c0 10 ce 7f ff        	LDS	#STACK
0231 01c4 8e 00 68           	LDX	#BUFFER
0232 01c7 9f 0a              	STX	XTEMP3	; SAVE BOUND
0233 01c9 8d d4              	BSR	CLRBG2
0234 01cb 8e 10 27           	LDX	#ENDSTR	; SET PUNCH LIMITS
0235 01ce ae 84              	LDX	0,X	; SET END
0236 01d0 9f 08              	STX	DIMPNT
0237 01d2 8e 00 68           	LDX	#BUFFER	; POINT TO BUFFER
0238 01d5 bd 03 15           	JSR	PCRLF	; OUT A CR & LF
0239 01d8 86 21              	lda	#PRMPTC
0240 01da bd 04 7f           	JSR	OUTCH	; OUTPUT PROMPT
0241 01dd bd 02 ea           FILBU2	JSR	INCHAR	; GET A CHARACTER
0242 01e0 27 de              	BEQ	FILBUF
0243 01e2 a7 84              	sta	0,X	; SAVE CHAR.
0244 01e4 81 0d              	cmpa	#$0D	; IS IT A C.R.?
0245 01e6 27 09              	BEQ	FILBU6
0246 01e8 30 01              	leax	1,x	; BUMP THE POINTER
0247 01ea 8c 00 b0           	CPX	#BUFFER+72
0248 01ed 26 ee              	BNE	FILBU2	; END OF BUFFER?
0249 01ef 20 cf              	BRA	FILBUF
0250 01f1 8e 00 68           FILBU6	LDX	#BUFFER	; RESET POINTER
0251 01f4 bd 03 5c           	JSR	BCDCO1	; LINE NO. CONV.
0252 01f7 9f 31              	STX	XTEMP2	; SAVE POINTER
0253 01f9 bd 03 a7           	JSR	FNDKEY	; CHECK KEY WORD
0254 01fc 4d                 	tsta
0255 01fd 26 1e              	BNE	FILBU8	; IF NONZERO THEN OK
0256 01ff 9e 04              	LDX	BUFPNT	; POINT TO BUFFER
0257 0201 a6 84              	lda	0,X	; GET CHARACTER
0258 0203 81 0d              	cmpa	#$D	; IS IT A C.R.?
0259 0205 26 08              	BNE	FILBU7
0260 0207 d6 28              	ldb	NOEXFL	; DIR. EXECUTION?
0261 0209 27 b5              	BEQ	FILBUF
0262 020b 97 12              	sta	CRFLAG	; SET FLAG
0263 020d 20 0e              	BRA	FILBU8	; IT IS OK
0264 020f bd 09 8d           FILBU7	JSR	TSTLET	; LET?
0265 0212 27 09              	BEQ	FILBU8
0266 0214 86 10              FILB75	lda	#$10
0267 0216 10 8e 04 d9        	LDY	#ERR10	; POINTER TO MSG
0268 021a 7e 04 a0           	JMP	MISTAK	; REPORT ERROR
0269 021d 96 3e              FILBU8	lda	CHRCNT	; GET CHAR. COUNT
0270 021f 90 26              	suba	NUMCNT	; SUB LINE # DIGITS
0271 0221 97 3e              	sta	CHRCNT	; SAVE
0272 0223 d6 28              	ldb	NOEXFL	; DIRECT EXECUTE?
0273 0225 26 06              	BNE	STUFLN	; IF NOT GO PUT LINE
0274 0227 bd 03 15           	JSR	PCRLF	; OUTPUT C.R. L.F.
0275 022a 7e 09 89           	JMP	RUNEX4	; GO TO ROUTINE
0276                         
0277                         * PUT LINE IN PROGRAM STORAGE
0278                         
0279 022d be 01 0f           STUFLN	LDX	MEMEND
0280 0230 9f 37              	STX	CPX1
0281 0232 9e 31              	LDX	XTEMP2	; SET POINTER
0282 0234 9f 04              	STX	BUFPNT	; SAVE POINTER
0283 0236 bd 02 bb           	JSR	FNDLIN	; GO FIND LINE IN STORE
0284 0239 9f 22              	STX	XSAVE	; SAVE POINTER
0285 023b 5d                 	tstb		; DID WE FIND IT?
0286 023c 26 22              	BNE	INSERT	; IF NOT GO INSERT
0287                         
0288                         
0289                         * REPLACE EXISTING LINE WITH NEW ONE
0290                         
0291 023e 5c                 REPLAC	incb		; INC THE COUNTER
0292 023f a6 84              	lda	0,X	; GET A CHARACTER
0293 0241 30 01              	leax	1,x	; BUMP THE POINTER
0294 0243 81 0d              	cmpa	#$D	; IS IT A C.R,?
0295 0245 26 f7              	BNE	REPLAC
0296 0247 f7 02 57           REPLA4	stb	OFSET2+1	; SETUP OFFSET
0297 024a 86 ff              	lda	#$FF	; GET COUNT
0298 024c 50                 	negb		; 2'S COMP. IT
0299 024d 8d 4d              	BSR	ADJEND	; GO FIX END PNTR
0300 024f 9e 22              	LDX	XSAVE	; RESTORE THE POINTER
0301 0251 bc 10 27           REPLA5	CPX	ENDSTR	; END OF STORAGE?
0302 0254 27 08              	BEQ	REPLA6
0303 0256 a6 84              OFSET2	lda	0,X
0304 0258 a7 84              	sta	0,X	; MOVE A CHARACTER
0305 025a 30 01              	leax	1,x	; BUMP THE POINTER
0306 025c 20 f3              	BRA	REPLA5	; REPEAT
0307 025e 9e 22              REPLA6	LDX	XSAVE	; RESTORE THE POINTER
0308                         
0309                         * INSERT A LINE INTO PROGRAM STORAGE
0310                         
0311 0260 96 12              INSERT	lda	CRFLAG	; LONE C.R.?
0312 0262 26 35              	BNE	INSER6
0313 0264 be 10 27           	LDX	ENDSTR
0314 0267 d6 3e              	ldb	CHRCNT	; GET CHAR. COUNT
0315 0269 cb 02              	addb	#2	; BIAS FOR LINE NUM.
0316 026b f7 02 79           	stb	OFFSET+1	; SETUP OFFSET
0317 026e 8d 2c              	BSR	ADJEND	; FIX END PNTR
0318 0270 9c 22              INSER2	CPX	XSAVE	; DONE?
0319 0272 27 08              	BEQ	INSER3
0320 0274 30 1f              	leax	-1,x	; DEC THE POINTER
0321 0276 a6 84              	lda	0,X	; GET A CHAR,
0322 0278 a7 84              OFFSET	sta	0,X
0323 027a 20 f4              	BRA	INSER2	; MOVE IT
0324 027c 30 1f              INSER3	leax	-1,x
0325 027e bd 08 92           	JSR	PUTLB2	; PUT LAB
0326 0281 30 01              	leax	1,x	; BUMP THE POINTER
0327 0283 30 01              	leax	1,x
0328 0285 9f 22              INSER4	STX	XSAVE	; SAVE POINTER
0329 0287 9e 04              	LDX	BUFPNT
0330 0289 a6 84              	lda	0,X	; GET CHAR*
0331 028b 30 01              	leax	1,x	; BUMP THE POINTER
0332 028d 9f 04              	STX	BUFPNT	; SAVE
0333 028f 9e 22              	LDX	XSAVE	; RESTOR PNTR
0334 0291 30 01              	leax	1,x
0335 0293 a7 84              	sta	0,X	; SAVE IT
0336 0295 81 0d              	cmpa	#$D	; IS IT A C.R.?
0337 0297 26 ec              	BNE	INSER4
0338 0299 7e 01 c0           INSER6	JMP	FILBUF	; 60 TO MAIN LOOP
0339                         
0340                         * ADJUST THE END OF PROGRAM POINTER
0341                         
0342 029c fb 10 28           ADJEND	addb	ENDSTR+1
0343 029f b9 10 27           	adca	ENDSTR	; ADD IN VALUE
0344 02a2 d7 3a              	stb	CPX2+1
0345 02a4 97 39              	sta	CPX2	; SET END POINTER
0346 02a6 bd 0f 89           	JSR	CMPX1
0347 02a9 24 07              	BCC	ADJEN2
0348 02ab f7 10 28           	stb	ENDSTR+1
0349 02ae b7 10 27           	sta	ENDSTR	; SAVE NEW POINTER
0350 02b1 39                 	RTS		; RETURN
0351 02b2 86 90              ADJEN2	lda	#$90	; SET ERROR
0352 02b4 10 8e 06 96        	LDY	#ERR90
0353 02b8 7e 04 a0           	JMP	MISTAK
0354                         
0355                         * TRY TO FIND LINE
0356                         
0357 02bb 96 64              FNDLIN	lda	NUMBER+2
0358 02bd d6 63              	ldb	NUMBER+1
0359 02bf 8e 10 29           FINDLN	LDX	#STORSP	; SETUP POINTER
0360 02c2 bc 10 27           FINDL1	CPX	ENDSTR	; END OF STORAGE?
0361 02c5 26 02              	BNE	FINDL4
0362 02c7 5c                 FINDL2	incb
0363 02c8 39                 	RTS		; RETURN
0364 02c9 e1 84              FINDL4	cmpb	0,X	; CHECK M.S. DIGITS
0365 02cb 22 0a              	BHI	FINDL6
0366 02cd 26 f8              	BNE	FINDL2
0367 02cf a1 01              	cmpa	1,X	; CHECK L.S, DIGITS
0368 02d1 22 04              	BHI	FINDL6
0369 02d3 26 f2              	BNE	FINDL2
0370 02d5 5f                 	clrb		; CEAR FLAG
0371 02d6 39                 	RTS		; RETURN
0372 02d7 8d 04              FINDL6	BSR	FNDCRT	; GO FIND C.R,
0373 02d9 30 01              	leax	1,x	; BUMP THE POINTER
0374 02db 20 e5              	BRA	FINDL1	; REPEAT
0375                         
0376                         * FIND A C,R, IN STORAGE
0377                         
0378 02dd 34 02              FNDCRT	pshs	A	; SAVE A
0379 02df 86 0d              	lda	#$D
0380 02e1 30 01              FNDVAL	leax	1,x	; BUMP THE POINTER
0381 02e3 a1 84              	cmpa	0,X	; TEST FOR C.R.
0382 02e5 26 fa              	BNE	FNDVAL
0383 02e7 35 02              	puls	A	; RESTORE A
0384 02e9 39                 	RTS		; RETURN
0385                         
0386                         * INPUT
0387                         
0388 02ea bd 01 09           INCHAR	JSR	INCH	; GET THE CHAR.
0389 02ed 81 08              	cmpa	#BACKSP	; IS IT A BACKSPACE?
0390 02ef 26 1a              	BNE	INCHR2
0391 02f1 8c 00 68           	CPX	#BUFFER	; BEGINNING OF BUF?
0392 02f4 27 1e              	BEQ	INCHR4
0393 02f6 30 1f              	leax	-1,x	; BACKUP ONE POS.
0394 02f8 86 08              	lda	#$8
0395 02fa bd 01 06           	jsr	OUTEEE
0396 02fd 86 20              	lda	#$20
0397 02ff bd 01 06           	jsr	OUTEEE
0398 0302 86 08              	lda	#$8
0399 0304 bd 01 06           	jsr	OUTEEE
0400 0307 0a 3e              	DEC	CHRCNT	; DEC CHAR. COUNT
0401 0309 20 df              	BRA	INCHAR
0402 030b 81 18              INCHR2	cmpa	#DELCOD	; DELETE LINE?
0403 030d 27 05              	BEQ	INCHR4
0404 030f bd 01 06           	jsr	OUTEEE
0405 0312 0c 3e              	INC	CHRCNT
0406 0314 39                 INCHR4	RTS		; RETURN
0407                         
0408                         * PRINT CARRIAGE RETURN & LINEFEED
0409                         
0410 0315 9f 22              PCRLF	STX	XSAVE	; SAVE X REG
0411 0317 8e 03 2c           	LDX	#CRLFST	; POINT TO STRING
0412 031a a6 84              PDATA1	lda	0,X	; GET CHAR
0413 031c 81 04              	cmpa	#4	; IS IT 4?
0414 031e 27 07              	BEQ	PCRLF2
0415 0320 bd 04 7f           	JSR	OUTCH	; OUTPUT CHAR
0416 0323 30 01              	leax	1,x	; BUMP THE POINTER
0417 0325 20 f3              	BRA	PDATA1	; REPEAT
0418 0327 9e 22              PCRLF2	LDX	XSAVE	; RESTORE X REG
0419 0329 0f 1d              	CLR	FLDCNT	; ZERO FIELD COUNT
0420 032b 39                 	RTS		; RETURN
0421                         
0422 032c 0d 0a 00 00 00 00  CRLFST	FCB	$D,$A,0,0,0,0,4
     04
0423                         
0424                         * TEST FOR STATEMENT TERMINATOR
0425                         
0426 0333 81 0d              TSTTRM	cmpa	#$D	; C,R,?
0427 0335 27 02              	BEQ	TSTTR2
0428 0337 81 3a              	cmpa	#':	; COLON?
0429 0339 39                 TSTTR2	RTS		; RETURN
0430                         
0431                         * CLEAR NUMBER THROUGH NUMBER+2
0432                         
0433 033a bd 0d fa           UPSCLR	JSR	STAKUP
0434 033d 4f                 CLRNUM	clra
0435 033e 97 62              	sta	NUMBER
0436 0340 97 63              	sta	NUMBER+1
0437 0342 97 64              	sta	NUMBER+2
0438 0344 39                 	RTS
0439                         
0440                         * CONVERT NUMBER TO PACKED BCD
0441                         
0442 0345 8d f6              BCDCON	BSR	CLRNUM	; CLEAR NUMBER
0443 0347 97 28              	sta	NOEXFL
0444 0349 97 27              	sta	NEGFLG
0445 034b 97 26              	sta	NUMCNT
0446 034d bd 03 93           	JSR	SKIPSP	; SKIP SPACES
0447 0350 81 2b              	cmpa	#'+	; IS IT A +?
0448 0352 27 06              	BEQ	BCDC01
0449 0354 81 2d              	cmpa	#'-	; IS IT A -?
0450 0356 26 04              	BNE	BCDCO1
0451 0358 03 27              	COM	NEGFLG	; SET FLAG
0452 035a 30 01              BCDC01	leax	1,x
0453 035c bd 0f be           BCDCO1	JSR	CLASS	; GET A DIGIT
0454 035f c1 03              	cmpb	#3	; IS IT A NUMBER?
0455 0361 27 05              	BEQ	BCDCO2
0456 0363 96 27              	lda	NEGFLG
0457 0365 7e 0e a3           	JMP	FIXSIN	; GO FIX UP THE SIGN
0458 0368 30 01              BCDCO2	leax	1,x	; BUMP THE POINTER
0459 036a 97 28              	sta	NOEXFL	; SET NO EXEC FLU
0460 036c 84 0f              	anda	#$0F	; MASK OFF ASCII
0461 036e c6 04              	ldb	#4	; SET COUNTER
0462 0370 08 64              BCDCO4	ASL	NUMBER+2
0463 0372 09 63              	ROL	NUMBER+1
0464 0374 09 62              	ROL	NUMBER	; SHIFT PREV. OVER
0465 0376 5a                 	decb		; DEC THE COUNTER
0466 0377 26 f7              	BNE	BCDCO4
0467 0379 9b 64              	adda	NUMBER+2
0468 037b 97 64              	sta	NUMBER+2 ; SAVE NEW VALUE
0469 037d 0c 26              	INC	NUMCNT	; INC NUMBER CNTR
0470 037f 20 db              	BRA	BCDCO1
0471                         
0472                         * FIND NEXT BLOCK
0473                         
0474 0381 9e 04              NXTBLK	LDX	BUFPNT	; RESTORE POINTER
0475 0383 a6 84              NXTBL4	lda	0,X	; GET A CHAR.
0476 0385 81 20              	cmpa	#' 	; IS IT A SPACE?
0477 0387 27 0a              	BEQ	SKIPSP
0478 0389 30 01              	leax	1,x	; BUMP THE POINTER
0479 038b 20 f6              	BRA	NXTBL4	; REPEAT
0480                         
0481                         * CONVERT AND SKIP
0482                         
0483 038d 8d b6              CONSKP	BSR	BCDCON
0484 038f 30 1f              	leax	-1,x
0485                         
0486                         * SKIP ALL SPACES
0487                         
0488 0391 30 01              SKPSP0	leax	1,x
0489 0393 a6 84              SKIPSP	lda	0,X	; GET CHR FROM BUF
0490 0395 81 20              	cmpa	#$20	; IS IT A SPACE?
0491 0397 27 f8              	BEQ	SKPSP0
0492 0399 39                 SKIPS4	RTS		; RETURN
0493                         
0494                         * FIND NEXT BLOCK NOT EXPECTING A SPACE
0495                         
0496 039a 9e 04              NXTSPC	LDX	BUFPNT	; SET POINTER
0497 039c bd 0f be           NXTSP4	JSR	CLASS	; GO CLASSIFY
0498 039f c1 02              	cmpb	#2	; IS IT A LETTER?
0499 03a1 26 f0              	BNE	SKIPSP
0500 03a3 30 01              	leax	1,x	; BUMP THE POINTER
0501 03a5 20 f5              	BRA	NXTSP4
0502                         
0503                         * FIND KEY WORD IF POSSIBLE
0504                         
0505 03a7 bd 03 93           FNDKEY	JSR	SKIPSP	; SKIP SPACES
0506 03aa 9f 04              	STX	BUFPNT	; SAVE THE POINTER
0507 03ac 9f 22              	STX	XSAVE
0508 03ae 8e 01 11           	LDX	#KEYTBL	; POINT TO KEY WORDS
0509 03b1 c6 05              FNDKE2	ldb	#5
0510                         FNDKE4	;anda	#$20
0511 03b3 a1 84              	cmpa	0,X	; TEST THE CHARACTER
0512 03b5 26 14              	BNE	FNDKE6
0513 03b7 9f 0a              	STX	XTEMP3	; SAVE POINTER
0514 03b9 9e 22              	LDX	XSAVE
0515 03bb 30 01              	leax	1,x	; BUMP POINTER
0516 03bd a6 84              	lda	0,X	; GET CHAR.
0517 03bf 9f 22              	STX	XSAVE
0518 03c1 9e 0a              	LDX	XTEMP3	; REST. PNTR.
0519 03c3 30 01              	leax	1,x
0520 03c5 5a                 	decb
0521 03c6 c1 02              	cmpb	#2
0522 03c8 26 e9              	BNE	FNDKE4	; IF NOT DONE REPEAT
0523 03ca 39                 FNDKE5	RTS		; RETURN
0524 03cb 30 01              FNDKE6	leax	1,x	; BUMP THE COUNTER
0525 03cd 5a                 	decb
0526 03ce 26 fb              	BNE	FNDKE6
0527 03d0 a6 84              	lda	0,X	; GET CHARACTER
0528 03d2 27 f6              	BEQ	FNDKE5	; IF ZERO, END OF LIST
0529 03d4 9f 0a              	STX	XTEMP3	; SAVE POINTER
0530 03d6 9e 04              	LDX	BUFPNT
0531 03d8 9f 22              	STX	XSAVE
0532 03da a6 84              	lda	0,X	; GET NEW CHAR.
0533 03dc 9e 0a              	LDX	XTEMP3	; RESTORE POINTER
0534 03de 20 d1              	BRA	FNDKE2	; REPEAT
0535                         
0536                         
0537                         * OUTPUT A NUMBER FROM PACKED BCD BYTES
0538                         
0539 03e0 8e 00 62           OUTBCD	LDX	#NUMBER	; SET POINTER
0540 03e3 c6 02              OUTBCI	ldb	#2	; SET COUNTER
0541 03e5 1c fe              	andcc	#$fe
0542 03e7 a6 84              	lda	0,X	; GET A WORD
0543 03e9 2a 18              	BPL	OUTBC4	; IF NOT NEG JMP AHEAD
0544 03eb 86 2d              	lda	#'-
0545 03ed bd 04 7f           	JSR	OUTCH	; OUTPUT A
0546 03f0 0c 1d              	INC	FLDCNT
0547 03f2 20 0f              	BRA	OUTBC4
0548 03f4 a6 84              OUTBC2	lda	0,X	; GET DIGITS
0549 03f6 85 f0              	bita	#$F0	; MASK
0550 03f8 25 02              	BCS	OUTBC3
0551 03fa 27 07              	BEQ	OUTBC4	; JMP IF ZEROES
0552 03fc bd 04 77           OUTBC3	JSR	OUTHL	; OUTPUT A DIGIT
0553 03ff 0c 1d              	INC	FLDCNT
0554 0401 1a 01              	orcc	#$1
0555 0403 a6 84              OUTBC4	lda	0,X	; GET A DIGIT
0556 0405 c5 ff              	bitb	#$FF	; LAST DIGIT?
0557 0407 27 06              	BEQ	OUTBC6
0558 0409 85 0f              	bita	#$0F	; MASK
0559 040b 25 02              	BCS	OUTBC6
0560 040d 27 07              	BEQ	OUTBC8	; JMP IF ZEROES
0561 040f bd 04 7b           OUTBC6	JSR	OUTHR	; OUTPUT A DIGIT
0562 0412 0c 1d              	INC	FLDCNT
0563 0414 1a 01              	orcc	#$1
0564 0416 30 01              OUTBC8	leax	1,x	; BUMP THE POINTER
0565 0418 5a                 	decb		; DEC THE COUNTER
0566 0419 2a d9              	BPL	OUTBC2	; REPEAT IF NOT DONE
0567 041b 39                 	RTS		; RETURN
0568                         
0569                         * LIST USERS PROGRAM
0570                         
0571 041c bd 03 9a           LIST	JSR	NXTSPC	; FIND NEXT
0572 041f 81 0d              	cmpa	#$D
0573 0421 27 25              	BEQ	LIST3
0574 0423 bd 03 45           	JSR	BCDCON	; GET LINE NUM
0575 0426 9f 04              	STX	BUFPNT	; SAVE POINTER
0576 0428 bd 02 bb           	JSR	FNDLIN	; FIND LINE
0577 042b 9f 22              	STX	XSAVE	; SAVE IT
0578 042d bd 03 9a           	JSR	NXTSPC
0579 0430 81 0d              	cmpa	#$D	; C.R.?
0580 0432 26 04              	BNE	LIST1
0581 0434 0c 1b              	INC	SUBCNT	; SET TO 1
0582 0436 20 0c              	BRA	LIST2
0583 0438 30 01              LIST1	leax	1,x	; BUMP THE POINTER
0584 043a bd 03 93           	JSR	SKIPSP
0585 043d bd 03 45           	JSR	BCDCON	; GET COUNT
0586 0440 96 64              	lda	NUMBER+2
0587 0442 97 1b              	sta	SUBCNT	; SAVE IT
0588 0444 9e 22              LIST2	LDX	XSAVE	; POINT TO LINE
0589 0446 20 03              	BRA	LIST4
0590 0448 8e 10 29           LIST3	LDX	#STORSP	; SET POINTER
0591 044b bc 10 27           LIST4	CPX	ENDSTR	; END OF STORAGE?
0592 044e 27 24              	BEQ	LIST8
0593 0450 bd 03 15           	JSR	PCRLF	; OUTPUT A
0594 0453 c6 01              	ldb	#1	; SETUP COUNTER
0595 0455 1c fe              	andcc	#$fe
0596 0457 8d 9b              	BSR	OUTBC2	; OUT LINE NUMBER
0597 0459 a6 84              LIST5	lda	0,X	; GET A CHARACTER
0598 045b 81 0d              	cmpa	#$D	; IS IT A C.R.?
0599 045d 27 06              	BEQ	LIST6
0600 045f 8d 1e              	BSR	OUTCH	; OUTPUT CHARACTER
0601 0461 30 01              	leax	1,x	; BUMP THE POINTER
0602 0463 20 f4              	BRA	LIST5	; REPEAT
0603 0465 30 01              LIST6	leax	1,x	; BUMP THE POINTER
0604 0467 96 1b              	lda	SUBCNT	; GET COUNT
0605 0469 27 e0              	BEQ	LIST4
0606 046b 8b 99              	adda	#$99	; DEC THE COUNT
0607 046d 19                 	DAA
0608 046e 27 04              	BEQ	LIST8
0609 0470 97 1b              	sta	SUBCNT	; SAVE
0610 0472 20 d7              	BRA	LIST4
0611 0474 7e 01 c0           LIST8	JMP	FILBUF
0612                         
0613 0477 44                 OUTHL	lsra
0614 0478 44                 	lsra
0615 0479 44                 	lsra
0616 047a 44                 	lsra		; MOVE TO BOTTOM
0617 047b 84 0f              OUTHR	anda	#$0F	; MASK
0618 047d 8b 30              	adda	#$30	; BIAS
0619 047f bd 01 0c           OUTCH	JSR	BREAK	; CHECK FOR BREAK
0620 0482 7e 01 06           	JMP	OUTEEE	; GO PRINT
0621                         
0622                         * INTERNAL BREAK ROUTINE
0623                         
0624                         ; This routine monitors the ACIA for activity such that hitting the
0625                         ; Control-C key during program execution or listing will immediately
0626                         ; return to the main BASIC loop and respond with an error 99 ("BREAK
0627                         ; DETECTED") and then the prompt.
0628                         
0629 a000                    UART	EQU	$A000	; 6820 ACIA registers
0630 a001                    RECEV	EQU	UART+1
0631 a000                    USTAT	EQU	UART
0632                         
0633 0485 34 02              INTBRK	PSHS	A	; Save current A
0634 0487 b6 a0 00           	LDA	USTAT	; Read ACIA status register
0635 048a 85 01              	BITA	#1	; Check RDR bit
0636 048c 26 03              	BNE	BREAK2	; Branch if key pressed
0637 048e 35 02              RETN	PULS	A	; Restore A
0638 0490 39                 	RTS		; Return
0639 0491 b6 a0 01           BREAK2	LDA	RECEV	; Get character
0640 0494 84 7f              	ANDA	#$7F	; Convert to 7 bit ASCII
0641 0496 81 03              	CMPA	#$03	; Control-C?
0642 0498 26 f4              	BNE	RETN	; If not, return
0643 049a 86 99              	LDA	#$99	; SET ERROR CODE
0644 049c 10 8e 06 a6        	LDY	#ERR99
0645                         
0646                         * OUTPUT ERROR MESSAGE - pointer to string is in Y
0647                         * e.g. "ERROR WITH FOR-NEXT AT 110"
0648                         
0649 04a0 bd 03 15           MISTAK	JSR	PCRLF	; OUTPUT A CR & LF
0650 04a3 1f 21              	TFR	Y,X	; Put string pointer in X
0651 04a5 bd 03 1a           	JSR	PDATA1	; OUTPUT ERROR STRING
0652 04a8 d6 19              	ldb	RUNFLG	; RUNNING?
0653 04aa 26 03              	BNE	RUNER1
0654 04ac 7e 01 c0           MISTA4	JMP	FILBUF
0655 04af 8e 04 cf           RUNER1	LDX	#ERSTR2	; POINT TO STRING
0656 04b2 bd 03 1a           	JSR	PDATA1	; OUTPUT IT
0657 04b5 9e 04              	LDX	BUFPNT	; SET POINTER
0658 04b7 30 1f              RUNER2	leax	-1,x	; DEC THE POINTER
0659 04b9 8c 10 29           	CPX	#STORSP	; BEGINNING?
0660 04bc 27 08              	BEQ	RUNER4
0661 04be a6 84              	lda	0,X	; GET CHAR
0662 04c0 81 0d              	cmpa	#$D	; C.R.?
0663 04c2 26 f3              	BNE	RUNER2
0664 04c4 30 01              	leax	1,x	; BUMP THE POINTER
0665 04c6 c6 01              RUNER4	ldb	#1
0666 04c8 1c fe              	andcc	#$fe
0667 04ca bd 03 f4           	JSR	OUTBC2	; OUT LINE NUM.
0668 04cd 20 dd              	BRA	MISTA4
0669                         
0670 04cf 20 41 54 20 4c 49  ERSTR2	FCC	; AT LINE ;
     4e 45 20
0671 04d8 04                 	FCB	4
0672                         
0673                         ; Error message strings
0674 04d9 53 59 4e 54 41 58  ERR10	FCC	"SYNTAX ERROR"
     20 45 52 52 4f 52
0675 04e5 04                 	FCB	4
0676 04e6 49 4c 4c 45 47 41  ERR14	FCC	"ILLEGAL VARIABLE"
     4c 20 56 41 52 49
     41 42 4c 45
0677 04f6 04                 	FCB	4
0678 04f7 4e 4f 20 4c 49 4e  ERR16	FCC	"NO LINE NUMBER REFERENCED BY GOTO OR GOSUB"
     45 20 4e 55 4d 42
     45 52 20 52 45 46
     45 52 45 4e 43 45
     44 20 42 59 20 47
     4f 54 4f 20 4f 52
     20 47 4f 53 55 42
0679 0521 04                 	FCB	4
0680 0522 45 58 50 52 45 53  ERR20	FCC	"EXPRESSION SYNTAX, UNBALANCED PARENS, OR DIMENSION ERROR"
     53 49 4f 4e 20 53
     59 4e 54 41 58 2c
     20 55 4e 42 41 4c
     41 4e 43 45 44 20
     50 41 52 45 4e 53
     2c 20 4f 52 20 44
     49 4d 45 4e 53 49
     4f 4e 20 45 52 52
     4f 52
0681 055a 04                 	FCB	4
0682 055b 45 58 50 52 45 53  ERR21	FCC	"EXPRESSION EXPECTED BUT NOT FOUND"
     53 49 4f 4e 20 45
     58 50 45 43 54 45
     44 20 42 55 54 20
     4e 4f 54 20 46 4f
     55 4e 44
0683 057c 04                 	FCB	4
0684 057d 44 49 56 49 44 45  ERR22	FCC	"DIVIDE BY ZERO"
     20 42 59 20 5a 45
     52 4f
0685 058b 04                 	FCB	4
0686 058c 41 52 49 54 48 4d  ERR23	FCC	"ARITHMETIC OVERFLOW"
     45 54 49 43 20 4f
     56 45 52 46 4c 4f
     57
0687 059f 04                 	FCB	4
0688 05a0 45 58 50 52 45 53  ERR24	FCC	"EXPRESSION TOO COMPLEX"
     53 49 4f 4e 20 54
     4f 4f 20 43 4f 4d
     50 4c 45 58
0689 05b6 04                 	FCB	4
0690 05b7 53 59 4e 54 41 58  ERR31	FCC	"SYNTAX ERROR IN PRINT STATEMENT"
     20 45 52 52 4f 52
     20 49 4e 20 50 52
     49 4e 54 20 53 54
     41 54 45 4d 45 4e
     54
0691 05d6 04                 	FCB	4
0692 05d7 4d 49 53 53 49 4e  ERR32	FCC	"MISSING CLOSING QUOTE IN PRINTED STRING"
     47 20 43 4c 4f 53
     49 4e 47 20 51 55
     4f 54 45 20 49 4e
     20 50 52 49 4e 54
     45 44 20 53 54 52
     49 4e 47
0693 05fe 04                 	FCB	4
0694 05ff 42 41 44 20 44 49  ERR40	FCC	"BAD DIM STATEMENT"
     4d 20 53 54 41 54
     45 4d 45 4e 54
0695 0610 04                 	FCB	4
0696 0611 53 59 4e 54 41 58  ERR45	FCC	"SYNTAX ERROR IN INPUT STATEMENT"
     20 45 52 52 4f 52
     20 49 4e 20 49 4e
     50 55 54 20 53 54
     41 54 45 4d 45 4e
     54
0697 0630 04                 	FCB	4
0698 0631 53 59 4e 54 41 58  ERR51	FCC	"SYNTAX ERROR IN READ STATEMENT"
     20 45 52 52 4f 52
     20 49 4e 20 52 45
     41 44 20 53 54 41
     54 45 4d 45 4e 54
0699 064f 04                 	FCB	4
0700 0650 53 59 4e 54 41 58  ERR62	FCC	"SYNTAX ERROR IN IF STATEMENT"
     20 45 52 52 4f 52
     20 49 4e 20 49 46
     20 53 54 41 54 45
     4d 45 4e 54
0701 066c 04                 	FCB	4
0702 066d 52 45 54 55 52 4e  ERR73	FCC	"RETURN WITHOUT GOSUB"
     20 57 49 54 48 4f
     55 54 20 47 4f 53
     55 42
0703 0681 04                 	FCB	4
0704 0682 45 52 52 4f 52 20  ERR81	FCC	"ERROR WITH FOR-NEXT"
     57 49 54 48 20 46
     4f 52 2d 4e 45 58
     54
0705 0695 04                 	FCB	4
0706 0696 4d 45 4d 4f 52 59  ERR90	FCC	"MEMORY OVERFLOW"
     20 4f 56 45 52 46
     4c 4f 57
0707 06a5 04                 	FCB	4
0708 06a6 42 52 45 41 4b     ERR99	FCC	"BREAK"
0709 06ab 04                 	FCB	4
0710                         
0711                         * PRINT ROUTINE
0712                         
0713 06ac bd 03 9a           PRINT	JSR	NXTSPC	; FIND NEXT BLOCK
0714 06af bd 03 33           PRINT0	JSR	TSTTRM
0715 06b2 26 03              	BNE	FIELD1
0716 06b4 7e 07 44           	JMP	PRINT8
0717 06b7 0f 12              FIELD1	CLR	CRFLAG
0718 06b9 81 2c              	cmpa	#',	; IS IT A ","
0719 06bb 26 20              	BNE	PRINT2
0720 06bd d6 1d              	ldb	FLDCNT	; GET COUNT
0721 06bf 86 20              FIELD2	lda	#' 	; SPACE
0722 06c1 bd 04 7f           	JSR	OUTCH	; OUTPUT A SPACE
0723 06c4 5c                 	incb
0724 06c5 c5 07              	bitb	#7	; END OF FIELD?
0725 06c7 26 f6              	BNE	FIELD2
0726 06c9 c1 47              	cmpb	#$47	; END OF LINE?
0727 06cb 22 04              	BHI	FIELD3
0728 06cd d7 1d              	stb	FLDCNT	; SAVE FIELD INFO
0729 06cf 20 03              	BRA	PRINT1
0730 06d1 bd 03 15           FIELD3	JSR	PCRLF	; OUT A C.R. & L.F.
0731 06d4 0c 12              PRINT1	INC	CRFLAG	; SET FLAG
0732 06d6 30 01              	leax	1,x	; BUMP THE POINTER
0733 06d8 bd 03 93           	JSR	SKIPSP
0734 06db 20 d2              	BRA	PRINT0
0735 06dd 81 3b              PRINT2	cmpa	#';	; IS IT A ";"
0736 06df 27 f3              	BEQ	PRINT1
0737 06e1 81 22              	cmpa	#'"	; IS IT A QUOTE?
0738 06e3 26 06              	BNE	PRINT4
0739 06e5 30 01              	leax	1,x	; BUMP THE POINTER
0740 06e7 8d 65              	BSR	PSTRNG	; OUTPUT STRING
0741 06e9 20 47              	BRA	PRINT6
0742 06eb 0f 17              PRINT4	CLR	TABFLG	; CLEAR FLAG
0743 06ed 81 54              	cmpa	#'T	; IS IT A T?
0744 06ef 26 06              	BNE	PRIN45
0745 06f1 97 17              	sta	TABFLG	; SET FLAG
0746 06f3 86 41              	lda	#'A
0747 06f5 20 06              	BRA	PRIN47
0748 06f7 81 53              PRIN45	cmpa	#'S	; IS IT A S?
0749 06f9 26 2d              	BNE	PRIN55
0750 06fb 86 50              	lda	#'P
0751 06fd a1 01              PRIN47	cmpa	1,X
0752 06ff 26 27              	BNE	PRIN55
0753 0701 bd 03 9c           	JSR	NXTSP4	; FIND NEXT
0754 0704 bd 0c af           	JSR	EXPR	; EVALUATE
0755 0707 bd 08 3d           	JSR	BINCON	; CONVERT
0756 070a d6 64              	ldb	NUMBER+2
0757 070c 27 24              	BEQ	PRINT6
0758 070e 96 17              	lda	TABFLG	; CHECK FLAG
0759 0710 27 07              	BEQ	PRINT5
0760 0712 5a                 	decb
0761 0713 d1 1d              	cmpb	FLDCNT	; CHECK COUNT
0762 0715 23 1b              	BLS	PRINT6
0763 0717 20 02              	BRA	PRIN51
0764 0719 db 1d              PRINT5	addb	FLDCNT
0765 071b 86 20              PRIN51	lda	#' 	; SPACE
0766 071d bd 04 7f           	JSR	OUTCH	; OUTPUT SPACE
0767 0720 0c 1d              	INC	FLDCNT	; BUMP COUNTER
0768 0722 d1 1d              	cmpb	FLDCNT
0769 0724 26 f5              	BNE	PRIN51	; REPEAT
0770 0726 20 0a              PRIN52	BRA	PRINT6
0771 0728 bd 0c af           PRIN55	JSR	EXPR	; EVAL EXPRESSION
0772 072b 9f 22              	STX	XSAVE	; SAVE POINTER
0773 072d bd 03 e0           	JSR	OUTBCD	; OUTPUT VALUE
0774 0730 9e 22              	LDX	XSAVE	; RESTORE
0775 0732 bd 0f b9           PRINT6	JSR	SKYCLS
0776 0735 5a                 	decb
0777 0736 26 03              	BNE	PRINT7	; CHECK FOR ERROR
0778 0738 7e 06 af           	JMP	PRINT0
0779 073b 86 31              PRINT7	lda	#$31
0780 073d 10 8e 05 b7        	LDY	#ERR31	; POINTER TO MSG
0781 0741 7e 04 a0           	JMP	MISTAK
0782 0744 0d 12              PRINT8	TST	CRFLAG	; C.R.?
0783 0746 26 03              	BNE	PRINT9
0784 0748 bd 03 15           	JSR	PCRLF	; OUTPUT C.R. L.F
0785 074b 7e 09 44           PRINT9	JMP	RUNEXC
0786                         
0787                         * PRINT STRING ROUTINE
0788                         
0789 074e a6 84              PSTRNG	lda	0,X	; GET A CHAR.
0790 0750 81 22              	cmpa	#'"	; IS IT A QUOTE?
0791 0752 27 0e              	BEQ	PSTRN4
0792 0754 bd 03 33           	JSR	TSTTRM	; IS IT A C.R.?
0793 0757 27 0e              	BEQ	PSTRN8
0794 0759 bd 04 7f           	JSR	OUTCH	; OUTPUT CHARACTER
0795 075c 0c 1d              	INC	FLDCNT	; BUMP FIELD CNT
0796 075e 30 01              	leax	1,x	; BUMP THE POINTER
0797 0760 20 ec              	BRA	PSTRNG	; REPEAT
0798 0762 30 01              PSTRN4	leax	1,x
0799 0764 7e 03 93           	JMP	SKIPSP
0800 0767 86 32              PSTRN8	lda	#$32
0801 0769 10 8e 05 d7        	LDY	#ERR32	; POINTER TO MSG
0802 076d 7e 04 a0           	JMP	MISTAK	; REPORT ERROR
0803                         
0804                         * FIND LABEL ROUTINE
0805                         
0806 0770 9f 04              FNDVAR	STX	BUFPNT	; SAVE POINTER
0807 0772 bd 0f c0           	JSR	CLASS1	; GO CLASSIFY CHAR.
0808 0775 c1 02              	cmpb	#2	; CHECK FOR LETTER
0809 0777 26 34              	BNE	FNDL25	; ERROR
0810 0779 0f 20              	CLR	XTEMP
0811                         ;	tfr	a,b	; SAVE LABEL
0812                         ;	ASL	A	; MULT IT BY 2
0813                         ;	ABA	ADD IT
0814 077b a7 e2              	sta	,-s
0815 077d 48                 	asla
0816 077e ab e0              	adda	,s+
0817 0780 80 13              	suba	#$13
0818 0782 97 21              	sta	XTEMP+1
0819 0784 9e 20              	LDX	XTEMP	; POINT TO IT
0820 0786 39                 	RTS		; RETURN
0821                         
0822                         * FIND DIMENSIONED VARIABLE
0823                         
0824 0787 a6 84              FNDLB0	lda	0,X
0825 0789 30 01              FNDLBL	leax	1,x	; ADVANCE POINTER
0826 078b 0f 18              	CLR	DIMFLG
0827 078d 8d e1              	BSR	FNDVAR	; GO FIND VAR.
0828 078f 5f                 	clrb
0829 0790 a6 84              	lda	0,X	; GET CHAR.
0830 0792 81 0a              	cmpa	#$0A	; CHECK FOR 1 DIM
0831 0794 27 06              	BEQ	FNDLB2
0832 0796 81 0b              	cmpa	#$0B	; CHECK IF 2 DIM
0833 0798 27 01              	BEQ	FNDLB1
0834 079a 39                 	RTS
0835 079b 5c                 FNDLB1	incb		; SET FLAG-2 DIM
0836 079c a6 01              FNDLB2	lda	1,X	; SET POINTER
0837 079e 34 02              	pshs	A	;
0838 07a0 a6 02              	lda	2,X
0839 07a2 34 02              	pshs	A	;
0840 07a4 34 04              	pshs	B	; SAVE B
0841 07a6 bd 03 9a           	JSR	NXTSPC	; FIND NEXT
0842 07a9 35 04              	puls	B	;
0843 07ab 81 28              	cmpa	#'(	; IS IT A PAREN?
0844 07ad 26 7b              FNDL25	BNE	FNDLB9
0845 07af 5d                 	tstb
0846 07b0 27 15              	BEQ	FNDLB3
0847 07b2 30 01              	leax	1,x
0848 07b4 bd 0c b1           	JSR	EXPRO	; GO EVALUATE
0849 07b7 96 64              	lda	NUMBER+2	; GET RESULT
0850 07b9 34 02              	pshs	A	; SAVE IT
0851 07bb bd 0e 0b           	JSR	STAKDN	; RESTORE
0852 07be bd 03 9a           	JSR	NXTSPC	; FIND NEXT
0853 07c1 81 2c              	cmpa	#',	; IS IT A COMMA?
0854 07c3 26 65              	BNE	FNDLB9
0855 07c5 20 03              	BRA	FNDLB4
0856 07c7 4f                 FNDLB3	clra
0857 07c8 34 02              	pshs	A	; SET ROWV
0858 07ca 4c                 FNDLB4	inca
0859 07cb 97 18              	sta	DIMFLG	; SET FLAG
0860 07cd 30 01              	leax	1,x
0861 07cf bd 0c b1           	JSR	EXPRO
0862 07d2 30 01              	leax	1,x
0863 07d4 9f 04              	STX	BUFPNT	; SAVE POINTER
0864 07d6 35 02              	puls	A	;
0865 07d8 97 14              	sta	ROWVAR	; SAVE
0866 07da 35 02              	puls	A	;
0867 07dc 97 21              	sta	XTEMP+1	; SAVE
0868 07de 35 02              	puls	A	;
0869 07e0 97 20              	sta	XTEMP	; SAVE
0870 07e2 9e 20              	LDX	XTEMP	; SET POINTER
0871 07e4 a6 84              	lda	0,X	; GET CHAR
0872 07e6 97 16              	sta	COLCON	; SAVE IT
0873 07e8 30 01              	leax	1,x	; BUMP THE POINTER
0874 07ea 30 01              	leax	1,x
0875 07ec 9f 20              	STX	XTEMP
0876 07ee bd 03 3a           	JSR	UPSCLR
0877 07f1 96 14              	lda	ROWVAR	; GET VAR.
0878 07f3 9e 20              	LDX	XTEMP
0879 07f5 30 1f              	leax	-1,x	; DEC POINTER
0880 07f7 a1 84              	cmpa	0,X	; CHECK
0881 07f9 22 2f              	BHI	FNDLB9
0882 07fb 97 64              	sta	NUMBER+2
0883 07fd bd 03 3a           	JSR	UPSCLR	; PUSH STACK
0884 0800 96 16              	lda	COLCON	; GET CONST,
0885 0802 91 5e              	cmpa	AC-1	; CHECK
0886 0804 27 02              	BEQ	FNDL45
0887 0806 23 22              	BLS	FNDLB9	; ERROR!
0888 0808 8b 01              FNDL45	adda	#1
0889 080a 19                 	DAA		; BIAS IT
0890 080b 97 64              	sta	NUMBER+2
0891 080d bd 0e b0           	JSR	MULT	; GO MULTIPLY
0892 0810 bd 0e 82           	JSR	ADD	; GO ADD
0893 0813 bd 08 33           FNDLB5	JSR	TIMTHR
0894                         
0895                         * ROUTINE TO ADD VALUE TO X-REG.
0896                         
0897 0816 96 20              ADDX	lda	XTEMP	; GET M.S.BYTE
0898 0818 d6 21              	ldb	XTEMP+1
0899 081a db 64              	addb	NUMBER+2
0900 081c 99 63              	adca	NUMBER+1
0901 081e 97 20              	sta	XTEMP	; SAVE SUM
0902 0820 d7 21              	stb	XTEMP+1
0903 0822 bd 0e 0b           	JSR	STAKDN
0904 0825 9e 20              	LDX	XTEMP	; SET POINTER
0905 0827 0f 18              	CLR	DIMFLG	; RESTORE FLAG
0906 0829 39                 	RTS		; RETURN
0907                         
0908 082a 86 14              FNDLB9	lda	#$14	; SET ERROR
0909 082c 10 8e 04 e6        	LDY	#ERR14
0910 0830 7e 04 a0           	JMP	MISTAK	; GO REPORT
0911                         
0912                         * ROUTINE TO MULTIPLY BY 3
0913                         
0914 0833 bd 03 3a           TIMTHR	JSR	UPSCLR
0915 0836 86 03              	lda	#$3	; SET MULTIPLIER
0916 0838 97 64              	sta	NUMBER+2
0917 083a bd 0e b0           	JSR	MULT	; GO MULTIPLY
0918                         
0919                         * BCD TO BINARY CONVERT.
0920                         
0921 083d 96 64              BINCON	lda	NUMBER+2	; GET LS BYTE
0922 083f 34 02              	pshs	A	; SAVE
0923 0841 96 63              	lda	NUMBER+1
0924 0843 34 02              	pshs	A	; SAVE:
0925 0845 5f                 	clrb
0926 0846 d7 63              	stb	NUMBER+1
0927 0848 d7 64              	stb	NUMBER+2	; INITIALIZE
0928 084a 96 62              	lda	NUMBER
0929 084c 8d 18              	BSR	ADSHF1	; ADD A SHIFT
0930 084e 35 02              	puls	A	;
0931 0850 34 02              	pshs	A	;
0932 0852 8d 0e              	BSR	ADSHF0	; GO ADD IN AND SHIFT
0933 0854 35 02              	puls	A	; GET MS BYTE AGAIN
0934 0856 8d 0e              	BSR	ADSHF1	; GO ADD IN AND SHIFT
0935 0858 35 02              	puls	A	; GET LS BYTE
0936 085a 34 02              	pshs	A	;
0937 085c 8d 04              	BSR	ADSHF0
0938 085e 35 02              	puls	A	;
0939 0860 20 21              	BRA	ADDIN	; G0 ADD IN ONES
0940 0862 44                 ADSHF0	lsra
0941 0863 44                 	lsra
0942 0864 44                 	lsra
0943 0865 44                 	lsra		; MOVE TO LS HALF
0944 0866 8d 1b              ADSHF1	BSR	ADDIN	; GO ADD IN
0945 0868 d6 63              	ldb	NUMBER+1
0946 086a 48                 	asla
0947 086b 59                 	rolb		; MULT BY 2
0948 086c 34 04              	pshs	B	;
0949 086e 34 02              	pshs	A	; SAVE
0950 0870 48                 	asla
0951 0871 59                 	rolb
0952 0872 48                 	asla
0953 0873 59                 	rolb		; MULT BY 4 =*8
0954 0874 97 64              	sta	NUMBER+2
0955 0876 35 02              	puls	A	;
0956 0878 d7 63              	stb	NUMBER+1
0957 087a 8d 09              	BSR	ADDIN1	; GO ADD IN
0958 087c 35 02              	puls	A	;
0959 087e 9b 63              	adda	NUMBER+1
0960 0880 97 63              	sta	NUMBER+1	; MULTIPLY BY TEN
0961 0882 39                 	RTS
0962 0883 84 0f              ADDIN	anda	#$0F	; MASK
0963 0885 9b 64              ADDIN1	adda	NUMBER+2
0964 0887 97 64              	sta	NUMBER+2
0965 0889 24 02              	BCC	ADDIN2	; CHECK FOR CARRY
0966 088b 0c 63              	INC	NUMBER+1
0967 088d 39                 ADDIN2	RTS
0968                         
0969                         * PUT LABEL ROUTINE
0970                         
0971 088e 96 62              PUTLBL	lda	NUMBER
0972 0890 a7 84              	sta	0,X	; PUT M.S. BYTE
0973 0892 96 63              PUTLB2	lda	NUMBER+1
0974 0894 a7 01              	sta	1,X	; PUT NEXT
0975 0896 96 64              	lda	NUMBER+2
0976 0898 a7 02              	sta	2,X	; PUT L.S. BYTE
0977 089a 39                 	RTS		; RETURN
0978                         
0979                         * DIMENSION
0980                         
0981 089b 9e 06              DIM	LDX	FORSTK	; SET BOUNDS
0982 089d 9f 37              	STX	CPX1
0983 089f bd 03 9a           	JSR	NXTSPC
0984 08a2 bd 03 93           DIMN	JSR	SKIPSP	; CLASSIFY
0985 08a5 bd 07 70           	JSR	FNDVAR
0986 08a8 9f 0a              	STX	XTEMP3	; SAVE IT
0987 08aa bd 03 9a           	JSR	NXTSPC	; GET TO NEXT
0988 08ad 81 28              	cmpa	#'(	; IS IT A PAREN
0989 08af 26 24              	BNE	DIM9
0990 08b1 30 01              DIM01	leax	1,x	; BUMP THE POINTER
0991 08b3 bd 03 8d           	JSR	CONSKP	; CONVERT DIM
0992 08b6 81 29              	cmpa	#')	; IS IT A PAREN
0993 08b8 26 06              	BNE	DIM1
0994 08ba 4f                 	clra
0995 08bb 5f                 	clrb
0996 08bc 34 02              	pshs	A	; SAVE IT
0997 08be 20 1e              	BRA	DIM2
0998 08c0 81 2c              DIM1	cmpa	#',	; COMMA?
0999 08c2 26 11              	BNE	DIM9	; ERROR!
1000 08c4 96 64              	lda	NUMBER+2
1001 08c6 27 0d              	BEQ	DIM9
1002 08c8 34 02              	pshs	A	; SAVE
1003 08ca 30 01              	leax	1,x	; BUMP THE POINTER
1004 08cc bd 03 8d           	JSR	CONSKP	; CONVERT
1005 08cf c6 01              	ldb	#1
1006 08d1 81 29              	cmpa	#')	; PAREN?
1007 08d3 27 09              	BEQ	DIM2
1008 08d5 86 40              DIM9	lda	#$40	; SET ERROR
1009 08d7 10 8e 05 ff        	LDY	#ERR40
1010 08db 7e 04 a0           	JMP	MISTAK	; REPORT
1011 08de 96 64              DIM2	lda	NUMBER+2
1012 08e0 27 f3              	BEQ	DIM9
1013 08e2 34 02              	pshs	A	; SAVE
1014 08e4 9f 04              	STX	BUFPNT	; SAVE POINTER
1015 08e6 9e 0a              	LDX	XTEMP3	; SET X
1016 08e8 86 0a              	lda	#$0A
1017                         ;	ABA	SET MARKER
1018 08ea e7 e2              	stb	,-s
1019 08ec ab e0              	adda	,s+
1020 08ee a7 84              	sta	0,X	; SAVE IT
1021 08f0 96 08              	lda	DIMPNT	; GET POINTER
1022 08f2 a7 01              	sta	1,X	; SAVE IT
1023 08f4 96 09              	lda	DIMPNT+1
1024 08f6 a7 02              	sta	2,X
1025 08f8 9e 08              	LDX	DIMPNT	; SET POINTER
1026 08fa 35 02              	puls	A	;
1027 08fc a7 84              	sta	0,X	; SAVE 1ST DIM
1028 08fe 30 01              	leax	1,x	; BUMP THE POINTER
1029 0900 35 04              	puls	B	;
1030 0902 e7 84              	stb	0,X	; SAVE 2ND DIM
1031 0904 30 01              	leax	1,x
1032 0906 9f 20              	STX	XTEMP	; SAVE POINTER
1033 0908 8b 01              	adda	#1
1034 090a 19                 	DAA		; BIAS
1035 090b 34 02              	pshs	A	;
1036 090d 1f 98              	tfr	b,a
1037 090f 8b 01              	adda	#1	; BIAS
1038 0911 19                 	DAA		; ADJUST
1039 0912 1f 89              	tfr	a,b	; SAVE
1040 0914 bd 03 3d           	JSR	CLRNUM	; CLEAR STORAGE
1041 0917 d7 64              	stb	NUMBER+2
1042 0919 bd 03 3a           	JSR	UPSCLR	; GO CLEAR
1043 091c 35 02              	puls	A	;
1044 091e 97 64              	sta	NUMBER+2
1045 0920 bd 0e b0           	JSR	MULT	; MULTIPLY
1046 0923 bd 08 13           	JSR	FNDLB5	; GO FIX X
1047 0926 bd 0f 87           	JSR	CMPX	; TEST BOUNDS
1048 0929 23 03              	BLS	DIM5
1049 092b 7e 02 b2           	JMP	ADJEN2
1050 092e 9f 08              DIM5	STX	DIMPNT	; SAVE RESULT
1051 0930 9e 04              	LDX	BUFPNT	; RESTORE F'NTR
1052 0932 30 01              	leax	1,x
1053 0934 bd 03 93           	JSR	SKIPSP	; SKIP SPACES
1054 0937 bd 03 33           	JSR	TSTTRM
1055 093a 27 08              	BEQ	RUNEXC
1056 093c 30 01              	leax	1,x	; BUMP THE POINTER
1057 093e 7e 08 a2           	JMP	DIMN
1058                         
1059                         * EXTERNAL ROUTINE JUMP
1060                         
1061 0941 bd 6f 00           EXTRNL	JSR	EXTERN	; GO TO IT
1062                         
1063                         * RUN EXECUTIVE
1064                         
1065 0944 4f                 RUNEXC	clra
1066 0945 97 12              	sta	CRFLAG
1067 0947 97 1c              	sta	LETFLG
1068 0949 97 18              	sta	DIMFLG
1069 094b 97 2c              	sta	STKCNT
1070 094d 96 19              	lda	RUNFLG	; RUN MODE?
1071 094f 26 03              	BNE	RUNEX0
1072 0951 7e 01 c0           RUNEXA	JMP	FILBUF
1073 0954 9e 04              RUNEX0	LDX	BUFPNT	; SET POINTER
1074 0956 86 0d              RUNE05	lda	#$D
1075 0958 c6 3a              	ldb	#':	; SETUP TERMINATORS
1076 095a a1 84              RUNEX1	cmpa	0,X	; C.R. ?
1077 095c 27 08              	BEQ	RUNEX2
1078 095e e1 84              	cmpb	0,X	; IS IT A ':' ?
1079 0960 27 0d              	BEQ	RUNE27
1080 0962 30 01              	leax	1,x	; BUMP THE POINTER
1081 0964 20 f4              	BRA	RUNEX1	; REPEAT
1082 0966 30 01              RUNEX2	leax	1,x
1083 0968 bc 10 27           RUNE22	CPX	ENDSTR	; END OF STORAGE?
1084 096b 27 e4              	BEQ	RUNEXA
1085 096d 30 01              RUNE25	leax	1,x	; BUMP THE POINTER
1086 096f 30 01              RUNE27	leax	1,x
1087 0971 bd 01 0c           	JSR	BREAK	; GO CHECK BREAK
1088 0974 bd 03 a7           RUNEX3	JSR	FNDKEY	; FIND KEY WORD
1089 0977 4d                 	tsta
1090 0978 26 0f              	BNE	RUNEX4
1091 097a 9e 04              	LDX	BUFPNT	; SET POINTER
1092 097c 8d 0f              	BSR	TSTLET
1093 097e 27 09              	BEQ	RUNEX4
1094 0980 86 10              	lda	#$10
1095 0982 10 8e 04 d9        	LDY	#ERR10
1096 0986 7e 04 a0           RUNE35	JMP	MISTAK
1097 0989 ae 84              RUNEX4	LDX	0,X
1098 098b 6e 84              	JMP	0,X	; GO TO ROUTINE
1099                         
1100                         * TEST FOR IMPLIED LET
1101                         
1102 098d bd 0f be           TSTLET	JSR	CLASS	; CHECK CHAR.
1103 0990 c1 02              	cmpb	#2	; LETTER?
1104 0992 26 13              	BNE	TSTLE2
1105 0994 30 01              	leax	1,x	; BUMP THE POINTER
1106 0996 bd 03 93           	JSR	SKIPSP	; SKIP SPACES
1107 0999 81 3d              	cmpa	#'=	; EQUALS?
1108 099b 27 04              	BEQ	TSTLE1
1109 099d 81 28              	cmpa	#'(	; LEFT PARENT
1110 099f 26 06              	BNE	TSTLE2
1111 09a1 8e 01 23           TSTLE1	LDX	#LETADR	; SET POINTER
1112 09a4 97 1c              	sta	LETFLG	; SET FLAG
1113 09a6 5f                 	clrb
1114 09a7 39                 TSTLE2	RTS
1115                         
1116                         * RUN ROUTINE
1117                         
1118 09a8 bd 01 97           RUN	JSR	CLRBEG
1119 09ab bd 01 a4           	JSR	CLREND
1120 09ae be 01 0f           	LDX	MEMEND
1121 09b1 9f 06              	STX	FORSTK
1122 09b3 8e 10 29           	LDX	#STORSP	; SET POINTER
1123 09b6 0c 19              	INC	RUNFLG
1124 09b8 20 ae              	BRA	RUNE22
1125                         
1126                         * LET ROUTINE
1127                         
1128 09ba 9e 04              LET	LDX	BUFPNT
1129 09bc 96 1c              	lda	LETFLG	; TEST FLAG
1130 09be 26 03              	BNE	LET2
1131 09c0 bd 03 81           	JSR	NXTBLK	; FIND NEXT
1132 09c3 bd 0b d7           LET2	JSR	EXPEQU
1133 09c6 7e 09 44           	JMP	RUNEXC
1134                         
1135                         * GOTO ROUTINE
1136                         
1137 09c9 bd 03 9a           GOTO	JSR	NXTSPC	; FIND BLOCK
1138 09cc bd 0c af           GOTO1	JSR	EXPR	; GO EVALUATE
1139 09cf bd 02 bb           GOTO2	JSR	FNDLIN	; GO FIND LINE
1140 09d2 5d                 GOTO3	tstb		; FIND?
1141 09d3 27 09              	BEQ	GOTO5
1142 09d5 86 16              	lda	#$16	; SET ERROR
1143 09d7 10 8e 04 f7        	LDY	#ERR16
1144 09db 7e 04 a0           GOTO4	JMP	MISTAK	; REPORT
1145 09de 5c                 GOTO5	incb
1146 09df d7 19              	stb	RUNFLG	; SET RUN FLAG
1147 09e1 7e 09 68           	JMP	RUNE22
1148                         
1149                         * INPUT ROUTINE
1150                         
1151 09e4 bd 03 9a           INPUT	JSR	NXTSPC	; FIND NEXT
1152 09e7 0f 13              INPUT0	CLR	QMFLAG	; CLEAR FLAG
1153 09e9 bd 03 93           INPUT1	JSR	SKIPSP	; SKIP SPACES
1154 09ec 81 22              	cmpa	#'"	; IS IT A QUOTE?
1155 09ee 26 07              	BNE	INPUT2
1156 09f0 30 01              	leax	1,x	; BUMP THE POINTER
1157 09f2 bd 07 4e           	JSR	PSTRNG	; OUTPUT STRING
1158 09f5 20 3e              	BRA	INPUT6
1159 09f7 bd 07 89           INPUT2	JSR	FNDLBL	; FIND LABEL
1160 09fa 9f 33              	STX	XTEMP4	; SAVE POINTER
1161 09fc 8e 00 68           INPUT3	LDX	#BUFFER	; SET POINTER
1162 09ff 96 13              	lda	QMFLAG	; TEST FLAG
1163 0a01 26 07              	BNE	INPUT4
1164 0a03 86 3f              	lda	#'?
1165 0a05 97 13              	sta	QMFLAG	; SET FLAG
1166 0a07 bd 04 7f           	JSR	OUTCH	; OUT A ?
1167 0a0a bd 01 09           INPUT4	JSR	INCH	; GET A DIGIT
1168 0a0d 81 18              	cmpa	#DELCOD	; DELETE?
1169 0a0f 26 04              	BNE	INPU45
1170 0a11 0f 13              	CLR	QMFLAG
1171 0a13 20 e7              	BRA	INPUT3
1172 0a15 a7 84              INPU45	sta	0,X	; SAVE IT
1173 0a17 bd 04 7f           	JSR	OUTCH	; ECHO IT
1174 0a1a 30 01              	leax	1,x
1175 0a1c 81 2c              	cmpa	#',	; IS IT COMMA?
1176 0a1e 27 09              	BEQ	INPUT5
1177 0a20 81 0d              	cmpa	#$D	; IS IT A C.R.?
1178 0a22 26 e6              	BNE	INPUT4
1179 0a24 97 12              	sta	CRFLAG	; SET FLAG
1180 0a26 bd 03 15           	JSR	PCRLF	; OUTPUT A CR & LF
1181 0a29 8e 00 68           INPUT5	LDX	#BUFFER	; SET POINTER
1182 0a2c bd 03 45           	JSR	BCDCON	; GO CNVRT NUM.
1183 0a2f 9e 33              	LDX	XTEMP4
1184 0a31 8d 32              	BSR	LABLS2
1185 0a33 9f 04              	STX	BUFPNT	; SAVE POINTER
1186 0a35 81 2c              INPUT6	cmpa	#',	; IS IT A COMMA?
1187 0a37 26 08              	BNE	INPUT7
1188 0a39 30 01              	leax	1,x
1189 0a3b 96 12              	lda	CRFLAG	; TEST FLAG
1190 0a3d 27 aa              	BEQ	INPUT1
1191 0a3f 20 a6              	BRA	INPUT0
1192 0a41 bd 03 33           INPUT7	JSR	TSTTRM
1193 0a44 26 13              	BNE	INPUT9
1194 0a46 96 12              INPU72	lda	CRFLAG	; TEST FLAG
1195 0a48 27 03              	BEQ	INPUT8
1196 0a4a 7e 09 44           INPU75	JMP	RUNEXC
1197 0a4d bd 01 09           INPUT8	JSR	INCH	; GET CHAR.
1198 0a50 81 0d              	cmpa	#$D	; C.R.?
1199 0a52 26 f9              	BNE	INPUT8
1200 0a54 bd 03 15           	JSR	PCRLF
1201 0a57 20 f1              	BRA	INPU75
1202 0a59 86 45              INPUT9	lda	#$45
1203 0a5b 10 8e 06 11        	LDY	#ERR45
1204 0a5f 7e 04 a0           	JMP	MISTAK	; REPORT ERROR
1205                         
1206                         
1207                         * GET AND PUT LABEL
1208                         
1209 0a62 bd 07 89           LABELS	JSR	FNDLBL	; GO FIND IT
1210 0a65 bd 08 8e           LABLS2	JSR	PUTLBL	; GO PUT IT
1211 0a68 7e 03 9a           	JMP	NXTSPC	; GET TO NEXT SET
1212                         
1213                         
1214                         * DATA ROUTINE
1215                         
1216 0a6b 96 19              DATA	lda	RUNFLG	; RUNNING?
1217 0a6d 27 4b              	BEQ	READ6
1218 0a6f bd 03 9a           	JSR	NXTSPC	; FIND NEXT
1219 0a72 97 1a              	sta	DATAFL	; SET DATA FLAG
1220 0a74 9f 0c              	STX	DATAST	; SET POINTER
1221 0a76 9f 0e              	STX	DATAPT
1222 0a78 20 40              	BRA	READ6	; RETURN
1223                         
1224                         
1225                         * READ DATA ROUTINE
1226                         
1227 0a7a 96 19              READ	lda	RUNFLG	; RUNNING?
1228 0a7c 27 3c              	BEQ	READ6
1229 0a7e 96 1a              	lda	DATAFL	; CHECK FLAG
1230 0a80 27 3b              	BEQ	READ8
1231 0a82 bd 03 81           	JSR	NXTBLK	; GET NEXT
1232 0a85 bd 03 93           READ2	JSR	SKIPSP	; GO CLASSIFY
1233 0a88 bd 07 89           	JSR	FNDLBL
1234 0a8b 9f 33              	STX	XTEMP4
1235 0a8d 9e 04              	LDX	BUFPNT
1236 0a8f 9f 35              	STX	XTEMP5	; SAVE IT
1237 0a91 9e 0e              	LDX	DATAPT	; GET DATA PNTR
1238 0a93 bd 0c af           	JSR	EXPR	; GET DATA
1239 0a96 a6 84              	lda	0,X	; GET CHAR.
1240 0a98 bd 03 33           	JSR	TSTTRM	; TEST IT
1241 0a9b 26 04              	BNE	READ25
1242 0a9d 9e 0c              	LDX	DATAST	; SET POINTER
1243 0a9f 20 02              	BRA	READ3
1244 0aa1 30 01              READ25	leax	1,x	; BUMP THE POINTER
1245 0aa3 9f 0e              READ3	STX	DATAPT
1246 0aa5 9e 35              	LDX	XTEMP5
1247 0aa7 9f 04              	STX	BUFPNT
1248 0aa9 9e 33              	LDX	XTEMP4
1249 0aab 8d b8              	BSR	LABLS2
1250 0aad 81 2c              	cmpa	#',	; IS IT A COMMA?
1251 0aaf 26 04              	BNE	READ4
1252 0ab1 30 01              	leax	1,x
1253 0ab3 20 d0              	BRA	READ2	; REPEAT
1254 0ab5 bd 03 33           READ4	JSR	TSTTRM
1255 0ab8 26 03              	BNE	READ8	; ERROR
1256 0aba 7e 09 44           READ6	JMP	RUNEXC	; RETURN
1257 0abd 86 51              READ8   lda	#$51
1258 0abf 10 8e 06 31        	LDY	#ERR51	; POINTER TO MSG
1259 0ac3 7e 04 a0           	JMP	MISTAK
1260                         
1261                         * RESTORE DATA STRING
1262                         
1263 0ac6 9f 22              RESTOR	STX	XSAVE	; SAVE POINTER
1264 0ac8 9e 0c              	LDX	DATAST
1265 0aca 9f 0e              	STX	DATAPT	; FIX DATA PNTR
1266 0acc 9e 22              	LDX	XSAVE	; RESTORE POINTER
1267 0ace 20 ea              	BRA	READ6
1268                         
1269                         * ON GOTO ROUTINE
1270 0ad0 bd 03 81           ONGOTO	JSR	NXTBLK	; FIND NEXT BLOCK
1271 0ad3 bd 0c af           	JSR	EXPR	; EVAL. EXPR.
1272 0ad6 96 64              	lda	NUMBER+2
1273 0ad8 84 0f              	anda	#$0F	; MASK L.S. DIGIT
1274 0ada 34 02              	pshs	A	; SAVE A
1275 0adc 0f 12              	CLR	CRFLAG
1276 0ade 30 01              	leax	1,x	; BUMP THE POINTER
1277 0ae0 30 01              	leax	1,x
1278 0ae2 a6 84              	lda	0,X	; GET CHAR
1279 0ae4 81 54              	cmpa	#'T	; IS IT A "T"?
1280 0ae6 27 02              	BEQ	ONGOT0
1281 0ae8 97 12              	sta	CRFLAG	; SET FLAG
1282 0aea bd 03 83           ONGOT0	JSR	NXTBL4	; GET NEXT
1283 0aed 9f 22              	STX	XSAVE	; SAVE X
1284 0aef 35 02              	puls	A	; RESTORE A
1285 0af1 4a                 ONGOT1	deca
1286 0af2 27 12              	BEQ	ONGOT4
1287 0af4 e6 84              ONGOT2	ldb	0,X	; GET A CHAR,
1288 0af6 30 01              	leax	1,x	; BUMP THE POINTER
1289 0af8 c1 2c              	cmpb	#',	; IS IT A COMMA?
1290 0afa 26 04              	BNE	ONGOT3
1291 0afc 9f 22              	STX	XSAVE	; SAVE THE POINTER
1292 0afe 20 f1              	BRA	ONGOT1	; REPEAT
1293 0b00 c1 0d              ONGOT3	cmpb	#$D	; C^R^ ?
1294 0b02 26 f0              	BNE	ONGOT2
1295 0b04 9e 22              	LDX	XSAVE	; RESTORE POINTER
1296 0b06 d6 12              ONGOT4	ldb	CRFLAG	; CHECK FLAG
1297 0b08 27 03              	BEQ	ONGOT6
1298 0b0a 7e 0b 9b           	JMP	GOSUB2
1299 0b0d 7e 09 cc           ONGOT6	JMP	GOTO1
1300                         
1301                         * ROUTINE
1302                         
1303 0b10 bd 03 9a           IF	JSR	NXTSPC	; FIND NEXT
1304 0b13 bd 0c af           	JSR	EXPR	; EVAL EXPR
1305 0b16 a6 84              	lda	0,X	; GET CHAR
1306 0b18 8d 6e              	BSR	CLSREL	; REL OPERATOR?
1307 0b1a 26 63              	BNE	IF9	; ERROR!
1308 0b1c 34 02              	pshs	A	; SAVE A
1309 0b1e a6 01              	lda	1,X	; GET CHAR
1310 0b20 8d 66              	BSR	CLSREL	; REL OP?
1311 0b22 35 02              	puls	A	; RESTORE A
1312 0b24 26 06              	BNE	IF1
1313 0b26 e6 01              	ldb	1,X
1314                         ;	ABA	FORM REL CODE
1315 0b28 ab 01              	adda	1,x
1316 0b2a 30 01              	leax	1,x	; BUMP THE POINTER
1317 0b2c 30 01              IF1	leax	1,x
1318 0b2e 34 02              	pshs	A	; SAVE A
1319 0b30 bd 0c af           	JSR	EXPR	; EVAL EXPR
1320 0b33 35 02              	puls	A	;
1321 0b35 84 0f              	anda	#$0F	; MASK
1322 0b37 80 09              	suba	#9	; BIAS IT
1323 0b39 2b 44              	BMI	IF9	; ERROR?
1324 0b3b 48                 	asla		; TIMES FOUR
1325 0b3c 48                 	asla
1326 0b3d b7 0b 47           	sta	OFSET3+1
1327 0b40 bd 0e 7c           	JSR	SUB	; GO COMPARE
1328 0b43 bd 0f 94           	JSR	ZCHK	; SET CC REG
1329 0b46 20 fe              OFSET3	BRA	*
1330 0b48 2f 18              BRATBL	BLE	IF4	; BRANCH TABLE
1331 0b4a 20 30              	BRA	IF8
1332 0b4c 26 14              	BNE	IF4
1333 0b4e 20 2c              	BRA	IF8
1334 0b50 2c 10              	BGE	IF4
1335 0b52 20 28              	BRA	IF8
1336 0b54 2d 0c              	BLT	IF4
1337 0b56 20 24              	BRA	IF8
1338 0b58 27 08              	BEQ	IF4
1339 0b5a 20 20              	BRA	IF8
1340 0b5c 2e 04              	BGT	IF4
1341 0b5e 20 1c              	BRA	IF8
1342 0b60 20 1d              	BRA	IF9	; ERROR!
1343 0b62 9e 04              IF4	LDX	BUFPNT	; SET POINTER
1344 0b64 a6 84              	lda	0,X	; GET CHAR
1345 0b66 81 54              	cmpa	#'T	; IS IT A "T"?
1346 0b68 26 0f              	BNE	IF6
1347 0b6a bd 03 9a           	JSR	NXTSPC
1348 0b6d 9f 04              	STX	BUFPNT	; SAVE POINTER
1349 0b6f bd 0f c0           	JSR	CLASS1	; GO CLASSIFY
1350 0b72 c1 03              	cmpb	#3	; IS IT A NUMBER?
1351 0b74 26 03              	BNE	IF6
1352 0b76 7e 09 cc           	JMP	GOTO1	; GO TO GOTO
1353 0b79 7e 09 74           IF6	JMP	RUNEX3
1354 0b7c 7e 09 44           IF8	JMP	RUNEXC	; GO PROCESS CMND
1355 0b7f 86 62              IF9	lda	#$62	; SET ERROR
1356 0b81 10 8e 06 50        	LDY	#ERR62
1357 0b85 7e 04 a0           	JMP	MISTAK
1358                         
1359                         * CLASSIFY RELATIONAL OPERATION
1360                         
1361 0b88 81 3b              CLSREL	cmpa	#$3B
1362 0b8a 23 06              	BLS	CLSRE5
1363 0b8c 81 3e              	cmpa	#$3E	; CHECK CHAR
1364 0b8e 22 02              	BHI	CLSRE5
1365 0b90 5f                 	clrb		; CLEAR FLAG
1366 0b91 39                 	RTS		; RETURN
1367 0b92 5c                 CLSRE5	incb		; SET FLAG
1368 0b93 39                 	RTS		; RETURN
1369                         
1370                         * GOSUB ROUTINE
1371                         
1372 0b94 d6 19              GOSUB	ldb	RUNFLG
1373 0b96 27 e4              	BEQ	IF8
1374 0b98 bd 03 9a           	JSR	NXTSPC	; FIND NEXT
1375 0b9b 0c 1b              GOSUB2	INC	SUBCNT
1376 0b9d bd 0c af           	JSR	EXPR	; EVALUATE EXPR
1377 0ba0 30 1f              	leax	-1,x
1378 0ba2 bd 02 dd           	JSR	FNDCRT	; FIND C.R.
1379 0ba5 30 01              	leax	1,x	; BUMP THE POINTER
1380 0ba7 a6 84              	lda	0,X	; GET LINE NO
1381 0ba9 34 02              	pshs	A	;
1382 0bab a6 01              	lda	1,X
1383 0bad 34 02              	pshs	A	; SAVE AS RET. ADD.
1384 0baf 10 df 37           	STS	CPX1	; SAVE SP
1385 0bb2 8e 1e 23           	LDX	#STKBOT+35
1386 0bb5 bd 0f 87           	JSR	CMPX	; CHECK BOUNDS
1387 0bb8 23 03              	BLS	GOSUB4
1388 0bba 7e 02 b2           	JMP	ADJEN2	; RPT OVFL
1389 0bbd 7e 09 cf           GOSUB4	JMP	GOTO2
1390                         
1391                         * RETURN ROUTINE
1392                         
1393 0bc0 86 73              RETURN	lda	#$73
1394 0bc2 10 8e 06 6d        	LDY	#ERR73	; POINTER TO MSG
1395 0bc6 0a 1b              	DEC	SUBCNT	; DEC COUNTER
1396 0bc8 2a 03              	BPL	RETUR2
1397 0bca 7e 04 a0           	JMP	MISTAK	; ERROR!
1398 0bcd 35 02              RETUR2	puls	A	; GET RET. ADD.
1399 0bcf 35 04              	puls	B
1400 0bd1 bd 02 bf           	JSR	FINDLN	; GO FIND LINE
1401 0bd4 7e 09 d2           	JMP	GOTO3
1402                         
1403                         * EXPRESSION EQUATE
1404                         
1405 0bd7 bd 07 87           EXPEQU	JSR	FNDLB0	; FIND LABEL
1406 0bda 9f 33              	STX	XTEMP4	; SAVE
1407 0bdc bd 03 9a           	JSR	NXTSPC
1408 0bdf 30 01              	leax	1,x
1409 0be1 bd 0c af           	JSR	EXPR	; GO EVALUATE
1410 0be4 9e 33              	LDX	XTEMP4	; GET POINTER
1411 0be6 7e 08 8e           	JMP	PUTLBL	; INSTALL
1412                         
1413                         * FOR ROUTINE
1414                         
1415 0be9 bd 03 81           FOR	JSR	NXTBLK	; FIND NEXT
1416 0bec 34 02              	pshs	A	;
1417 0bee 8d e7              	BSR	EXPEQU
1418 0bf0 9e 08              	LDX	DIMPNT
1419 0bf2 9f 37              	STX	CPX1
1420 0bf4 9e 06              	LDX	FORSTK
1421 0bf6 35 02              	puls	A	;
1422 0bf8 a7 84              	sta	0,X
1423 0bfa 96 05              	lda	BUFPNT+1
1424 0bfc 30 1f              	leax	-1,x	; DEC THE POINTER
1425 0bfe a7 84              	sta	0,X
1426 0c00 96 04              	lda	BUFPNT	; SET UP IN INX
1427 0c02 30 1f              	leax	-1,x
1428 0c04 a7 84              	sta	0,X
1429 0c06 30 1f              	leax	-1,x
1430 0c08 bd 0f 87           	JSR	CMPX	; CHECK FOR OVFLW
1431 0c0b 22 03              	BHI	FOR5
1432 0c0d 7e 02 b2           	JMP	ADJEN2
1433 0c10 9f 06              FOR5	STX	FORSTK	; SAVE POINTER
1434 0c12 7e 09 44           	JMP	RUNEXC
1435                         
1436                         * NEXT ROUTINE
1437                         
1438 0c15 bd 03 81           NEXT	JSR	NXTBLK	; FIND NEXT
1439 0c18 9f 1e              	STX	NXPNTR
1440 0c1a 9e 06              	LDX	FORSTK	; SET POINTER
1441 0c1c bc 01 0f           NEXT1	CPX	MEMEND	; OVFLW?
1442 0c1f 26 05              	BNE	NEXT2
1443 0c21 9e 04              	LDX	BUFPNT	; RESTORE PNTR
1444 0c23 16 00 80           	lbra	NEXT9	; ERROR!
1445 0c26 30 01              NEXT2	leax	1,x	; FIXUP POINTER
1446 0c28 30 01              	leax	1,x
1447 0c2a 30 01              	leax	1,x
1448 0c2c a1 84              	cmpa	0,X	; CHECK
1449 0c2e 26 ec              	BNE	NEXT1
1450 0c30 30 1f              	leax	-1,x	; FIX POINTER
1451 0c32 30 1f              	leax	-1,x
1452 0c34 30 1f              	leax	-1,x
1453 0c36 9f 06              	STX	FORSTK
1454 0c38 30 01              	leax	1,x
1455 0c3a ae 84              	LDX	0,X
1456 0c3c 9f 04              	STX	BUFPNT	; SAVE IT
1457 0c3e bd 07 89           	JSR	FNDLBL	; FIND LABEL
1458 0c41 9f 33              	STX	XTEMP4	; SAVE IT
1459 0c43 bd 03 9a           	JSR	NXTSPC	; FIND NEXT
1460 0c46 bd 0c af           	JSR	EXPR	; EVALUATE
1461 0c49 bd 0d fa           	JSR	STAKUP
1462 0c4c 9e 33              	LDX	XTEMP4	; RESTORE PNTR
1463 0c4e bd 0d ed           	JSR	GETVAL	; GET LABEL VALUE
1464 0c51 9e 04              	LDX	BUFPNT
1465 0c53 a6 84              	lda	0,X	; GET CHAR
1466 0c55 81 53              	cmpa	#'S	; IS IT STEP?
1467 0c57 27 08              	BEQ	NEXT4
1468 0c59 bd 03 3a           	JSR	UPSCLR
1469 0c5c 4c                 	inca
1470 0c5d 97 64              	sta	NUMBER+2
1471 0c5f 20 0a              	BRA	NEXT5
1472 0c61 bd 03 9c           NEXT4	JSR	NXTSP4
1473 0c64 bd 0c af           	JSR	EXPR
1474 0c67 96 62              	lda	NUMBER
1475 0c69 97 1c              	sta	LETFLG	; SHOW NEG.
1476 0c6b bd 0e 82           NEXT5	JSR	ADD	; GO ADD IN STEP
1477 0c6e 8e 00 10           	LDX	#TRYVAL	; SET POINTER
1478 0c71 bd 08 8e           	JSR	PUTLBL	; SAVE LABEL
1479 0c74 bd 0e 7c           	JSR	SUB	; COMPARE
1480 0c77 bd 0f 94           	JSR	ZCHK	; SET CC REG
1481 0c7a d6 1c              	ldb	LETFLG	; CHK FLAG
1482 0c7c 2b 06              	BMI	NEXT6
1483 0c7e 1f 8a              	tfr	a,cc	; SET CC
1484 0c80 2c 16              	BGE	NEXT8
1485 0c82 20 04              	BRA	NEXT7
1486 0c84 1f 8a              NEXT6	tfr	a,cc	; SET CC
1487 0c86 2f 10              	BLE	NEXT8
1488 0c88 9e 06              NEXT7	LDX	FORSTK
1489 0c8a 30 01              	leax	1,x	; FIXUP PNTR
1490 0c8c 30 01              	leax	1,x
1491 0c8e 30 01              	leax	1,x
1492 0c90 9f 06              	STX	FORSTK	; SAVE IT
1493 0c92 9e 1e              	LDX	NXPNTR
1494 0c94 9f 04              	STX	BUFPNT	; SAVE
1495 0c96 20 0b              	BRA	NEXT85
1496 0c98 8e 00 10           NEXT8	LDX	#TRYVAL
1497 0c9b bd 0d ed           	JSR	GETVAL
1498 0c9e 9e 33              	LDX	XTEMP4
1499 0ca0 bd 08 8e           	JSR	PUTLBL
1500 0ca3 7e 09 44           NEXT85	JMP	RUNEXC
1501 0ca6 86 81              NEXT9	lda	#$81	; SET ERROR
1502 0ca8 10 8e 06 82        	ldy	#ERR81
1503 0cac 7e 04 a0           NEXTIO	JMP	MISTAK
1504                         
1505                         * EXPRESSION HANDLER
1506                         
1507 0caf 0f 2c              EXPR	CLR	STKCNT	; SET COUNT = 0
1508 0cb1 96 2c              EXPRO	lda	STKCNT
1509 0cb3 97 2d              	sta	AUXCNT
1510 0cb5 8d 04              	BSR	EVAL
1511 0cb7 4d                 	tsta		; CHECK FOR ERROR
1512 0cb8 26 f2              	BNE	NEXTIO
1513 0cba 39                 EXPR1	RTS		; RETURN
1514                         *
1515                         **EVAL
1516                         * EVALUATE AN ALGEBRAIC STRING
1517                         *
1518 0cbb 10 df fe           EVAL	STS	STKTOP	; SAVE SP TOP
1519 0cbe bd 0f b9           EVA0A	JSR	SKYCLS
1520 0cc1 9f 04              	STX	BUFPNT
1521 0cc3 c1 01              	cmpb	#1	; SEE IF EMPTY EXPRESSION
1522 0cc5 26 08              	BNE	EVAL0
1523 0cc7 86 21              	lda	#$21
1524 0cc9 10 8e 05 5b        	LDY	#ERR21	; POINTER TO MSG
1525 0ccd 20 53              	BRA	EVAL3
1526 0ccf 54                 EVAL0	lsrb		; SET UP
1527 0cd0 c1 03              	cmpb	#3	; CHECK FOR UNARY + OR -
1528 0cd2 26 03              	BNE	EVAL1
1529 0cd4 bd 03 3a           	JSR	UPSCLR
1530 0cd7 9e 04              EVAL1	LDX	BUFPNT
1531 0cd9 bd 0f b9           EVAL1A	JSR	SKYCLS	; GET NEXT CHAR
1532 0cdc 9f 04              	STX	BUFPNT
1533 0cde c1 04              	cmpb	#4	; CHECK FOR OPERATORS
1534 0ce0 23 02              	BLS	EVAL1Z
1535 0ce2 c6 05              	ldb	#5	; SET UP
1536 0ce4 58                 EVAL1Z	aslb
1537 0ce5 f7 0c e9           	stb	OFFREL+1	; SET UP BRANCH
1538 0ce8 20 fe              OFFREL	BRA	*
1539 0cea 20 30              	BRA	EVAL2	; ERROR
1540 0cec 20 20              	BRA	EVAL4	; TERMINATOR
1541 0cee 20 42              	BRA	EVAL8	; LETTER
1542 0cf0 20 36              	BRA	EVAL7	; NUMBER
1543 0cf2 20 06              	BRA	EVAL1C	; RIGHT PAREN
1544 0cf4 34 02              	pshs	A	; SAVE
1545 0cf6 30 01              	leax	1,x
1546 0cf8 20 c4              	BRA	EVA0A	; AGAIN
1547 0cfa 1f 41              EVAL1C	tfr	s,x	; GET SP
1548 0cfc d6 18              	ldb	DIMFLG
1549 0cfe 9c fe              	CPX	STKTOP	; CHECK FOR EMPTY
1550 0d00 27 09              	BEQ	EVAL1E
1551 0d02 35 02              	puls	A	;
1552 0d04 5f                 	clrb
1553 0d05 81 28              	cmpa	#'(	; CHECK FOR L PAREN ON STACK
1554 0d07 10 27 00 86        	lbeq	EVA11C	; IF SO, OK
1555                         EVAL1E
1556 0d0b 5d                 	TSTB		; CHECK FOR ALRIGHT
1557 0d0c 27 0e              	BEQ	EVAL2	; IF NOT SET, ERROR
1558 0d0e 4f                 EVAL4	clra
1559 0d0f d6 2c              	ldb	STKCNT	; GET STACK STKCNT
1560 0d11 5a                 	decb		; CHECK OP STACK
1561 0d12 d1 2d              	cmpb	AUXCNT
1562 0d14 26 06              	BNE	EVAL2	; IF NOT EMPTY, ERROR
1563 0d16 1f 41              	tfr	s,x
1564 0d18 9c fe              	CPX	STKTOP	; CHECK OPERATOR STACK
1565 0d1a 27 09              	BEQ	EVAL3A	; IF NOT EMPTY ERROR
1566 0d1c 86 20              EVAL2	lda	#$20	; SET ERROR NUMBER
1567 0d1e 10 8e 05 22        	ldy	#ERR20	; POINTER TO MSG
1568 0d22 10 de fe           EVAL3	LDS	STKTOP	; GET SP
1569 0d25 9e 04              EVAL3A	LDX	BUFPNT	; SET POINTER
1570 0d27 39                 	RTS
1571 0d28 bd 0d fa           EVAL7	JSR	STAKUP	; SHIFT OP STACK UP
1572 0d2b 9e 04              	LDX	BUFPNT
1573 0d2d bd 03 45           	JSR	BCDCON	; GET OPERAND
1574 0d30 20 63              	BRA	EVAL12
1575 0d32 a6 01              EVAL8	lda	1,X	; GET NEXT CHAR
1576 0d34 bd 0f c0           	JSR	CLASS1	; GO CLASSIFY
1577 0d37 c1 02              	cmpb	#2	; CHECK FOR LETTER
1578 0d39 26 29              	BNE	EVAL9	; IF NOT, VARIABLE
1579 0d3b a6 84              	lda	0,X	; GET CHAR BACK
1580 0d3d 9f 22              	STX	XSAVE	; SET FOR ENTRY TO FIMDKEY
1581 0d3f 8e 01 7b           	LDX	#FCTTBL
1582 0d42 bd 03 b1           	JSR	FNDKE2	; GO CHECK FUNCTION
1583 0d45 4d                 	tsta		; CHECK SUCCESS
1584 0d46 27 c6              	BEQ	EVAL4
1585 0d48 7e 09 89           	JMP	RUNEX4	; GO SERVICE
1586 0d4b 86 3f              EVAL86	lda	#'?	; GET STGNUM OPERATOR
1587 0d4d 34 02              EVAL87	pshs	A	; PUT ON STACK
1588 0d4f 9e 22              	LDX	XSAVE
1589 0d51 7e 0c be           	JMP	EVA0A
1590 0d54 86 40              EVAL85	lda	#'@	; GET ABS OPERATOR
1591 0d56 20 f5              	BRA	EVAL87
1592 0d58 bd 03 3a           EVAL88	JSR	UPSCLR	; MOVE STACK UP
1593 0d5b bd 10 04           	JSR	RANDOM	; COMPUTE RANDOM #
1594 0d5e 97 64              	sta	NUMBER+2
1595 0d60 9e 22              EVAL89	LDX	XSAVE	; RESTORE POINTER
1596 0d62 20 31              	BRA	EVAL12
1597 0d64 d6 fe              EVAL9	ldb	STKTOP
1598 0d66 34 04              	pshs	B	;
1599 0d68 d6 ff              	ldb	STKTOP+1
1600 0d6a 34 04              	pshs	B	;
1601 0d6c d6 2d              	ldb	AUXCNT	; GET COUNTER
1602 0d6e 34 04              	pshs	B	; SAVE
1603 0d70 d6 18              	ldb	DIMFLG	; GET FLAG
1604 0d72 34 04              	pshs	B	; SAVE
1605 0d74 bd 07 87           	JSR	FNDLB0	; FIND VARIABLE STORAGE
1606 0d77 35 04              	puls	B	; GET FLAG
1607 0d79 d7 18              	stb	DIMFLG	; RESTORE
1608 0d7b 35 04              	puls	B	; GET COUNTER
1609 0d7d d7 2d              	stb	AUXCNT	; RESTORE
1610 0d7f 35 04              	puls	B	;
1611 0d81 d7 ff              	stb	STKTOP+1
1612 0d83 35 04              	puls	B	;
1613 0d85 d7 fe              	stb	STKTOP
1614 0d87 bd 0d fa           	JSR	STAKUP
1615 0d8a 9e 20              	LDX	XTEMP
1616 0d8c bd 0d ed           	JSR	GETVAL	; MOVE VALUE TO NUMBER
1617 0d8f 20 06              	BRA	EVA12A
1618 0d91 9e 04              EVA11C	LDX	BUFPNT	; RESTORE POINTER
1619 0d93 30 01              	leax	1,x
1620 0d95 9f 04              EVAL12	STX	BUFPNT	; SAVE POINTER
1621 0d97 1f 41              EVA12A	tfr	s,x
1622 0d99 9c fe              	CPX	STKTOP	; CHECK OPERATOR STACK
1623 0d9b 27 3f              	BEQ	EVAL10	; IF EMPTY, DON'T OPERATE
1624 0d9d 35 02              	puls	A	;
1625 0d9f 34 02              	pshs	A	; PUT BACK
1626 0da1 81 28              	cmpa	#'(	; CHECK FOR LEFT PAREN
1627 0da3 27 37              	BEQ	EVAL10	; IF SO, DON'T OPERATE
1628 0da5 bd 0f c0           	JSR	CLASS1	; GO CLASSYFY
1629 0da8 34 04              	pshs	B	;
1630 0daa 54                 	lsrb		; SET UP ID
1631 0dab 96 2c              	lda	STKCNT	; GET COUNT
1632 0dad 4a                 	deca
1633 0dae c1 04              	cmpb	#4	; CHECK FOR ABS OR SON
1634 0db0 27 04              	BEQ	EVA12C	; IF SO, GO AHEAD
1635 0db2 91 2d              	cmpa	AUXCNT	; OTHERWISE CHECK FOR 2 OPERANDS
1636 0db4 27 26              	BEQ	EVAL10	; IF NOT, ABORT
1637 0db6 81 09              EVA12C	cmpa	#9	; CHECK OVERFLOW
1638 0db8 23 08              	BLS	EVA12D	; OK
1639 0dba 86 24              	lda	#$24	; SET ERROR
1640 0dbc 10 8e 05 a0        	ldy	#ERR24
1641 0dc0 20 17              	BRA	EVAL19
1642 0dc2 35 02              EVA12D	puls	A	; GET CLASSIFICATION
1643 0dc4 35 04              	puls	B	; GET OPERATOR
1644 0dc6 80 06              	suba	#6	; REMOVE BIAS
1645 0dc8 48                 	asla		; #2
1646 0dc9 8e 0d df           	LDX	#OPTBL	; POINT
1647 0dcc ad 96              	jsr	[a,X]
1648 0dce bd 0f 94           	JSR	ZCHK	; CHECK RESULT
1649 0dd1 28 c4              	BVC	EVA12A	; IF NO OVFL, GO OPERATE AGAIN
1650 0dd3 86 23              EVAL18	lda	#$23	; SET ERROR NUMBER
1651 0dd5 10 8e 05 8c        	LDY	#ERR23
1652 0dd9 7e 0d 22           EVAL19	JMP	EVAL3
1653 0ddc 7e 0c d7           EVAL10	JMP	EVAL1
1654 0ddf 0e 82              OPTBL	FDB	ADD
1655 0de1 0e 7c              	FDB	SUB
1656 0de3 0f 54              	FDB	SIGNUM
1657 0de5 0e 74              	FDB	ABSVAL
1658 0de7 0e b0              	FDB	MULT
1659 0de9 0e d1              	FDB	DIVIDE
1660 0deb 0f 66              	FDB	EXPON
1661                         *
1662                         ** GET VALUE
1663                         * MOVE 3 BYTES POINTED TO BY X TO NUMBER
1664                         *
1665 0ded a6 84              GETVAL	lda	0,X	; GET VALUE
1666 0def 97 62              	sta	NUMBER	; STORE
1667 0df1 a6 01              	lda	1,X
1668 0df3 97 63              	sta	NUMBER+1
1669 0df5 a6 02              	lda	2,X
1670 0df7 97 64              	sta	NUMBER+2
1671 0df9 39                 	RTS
1672                         *
1673                         *
1674                         ** STACKUP
1675                         * ROLL OPERATIONAL STACK UPWARD
1676                         *
1677 0dfa 8e 00 3b           STAKUP	LDX	#STKEND	; POINT TO END
1678 0dfd e6 03              STAKU2	ldb	3,X
1679 0dff e7 84              	stb	0,X	; MOVE
1680 0e01 30 01              	leax	1,x
1681 0e03 8c 00 62           	CPX	#NUMBER	; SEE IF DONE
1682 0e06 26 f5              	BNE	STAKU2
1683 0e08 0c 2c              	INC	STKCNT
1684 0e0a 39                 	RTS
1685                         *
1686                         *
1687                         ** STACKDOWN
1688                         * ROLL OPERATIONAL STACK DOWNWARD
1689                         *
1690 0e0b 8e 00 64           STAKDN	LDX	#AX-1	; POINT TO STORE
1691 0e0e e6 84              STAKD1	ldb	0,X
1692 0e10 e7 03              	stb	3,X
1693 0e12 30 1f              	leax	-1,x
1694 0e14 8c 00 3a           	CPX	#STKEND-1	; SEE IF DONE
1695 0e17 26 f5              	BNE	STAKD1
1696 0e19 0a 2c              	DEC	STKCNT
1697 0e1b 39                 	RTS
1698                         *
1699                         *
1700                         ** UADD
1701                         * UNSIGNED ADD OF AX TO NUMBER
1702                         *
1703 0e1c 1c fe              UADD	andcc	#$fe	; ZERO THE CARRY
1704 0e1e 8e 00 64           UADD1	LDX	#NUMBER+2	; POINT TO STORE
1705 0e21 34 01              	pshs	cc	;
1706 0e23 a6 84              UADD2	lda	0,X	; GET ADDEND
1707 0e25 35 01              	puls	cc
1708 0e27 a9 03              	adca	3,X	; ADD IN AUGEND
1709 0e29 19                 	DAA
1710 0e2a 34 01              	pshs	cc	;
1711 0e2c a7 84              	sta	0,X	; SAVE
1712 0e2e 30 1f              	leax	-1,x
1713 0e30 8c 00 61           	CPX	#NUMBER-1	; SEE IF DONE
1714 0e33 26 ee              	BNE	UADD2
1715 0e35 35 01              	puls	cc	;
1716 0e37 34 04              UADD22	pshs	B	;
1717 0e39 c6 02              	ldb	#$02	; SET FOR OVFL
1718 0e3b 85 f0              	bita	#$F0	; AND AGAIN
1719 0e3d 26 01              	BNE	UADD25
1720 0e3f 5f                 	clrb		; RESET OFVL
1721 0e40 da 30              UADD25	orb	OVFLBF
1722 0e42 d7 30              	stb	OVFLBF	; SET OVFL IF NECESSARY
1723 0e44 1f 98              	tfr	b,a
1724 0e46 35 04              	puls	B	;
1725 0e48 39                 UADD3	RTS
1726                         *
1727                         *
1728                         **USUB
1729                         * UNSIGNED SUBTRACT OF AX FROM NUMBER
1730                         *
1731 0e49 8d 04              USUB	BSR	TENCOM	; GO TEN'S COMPLEMENT
1732 0e4b 1a 01              	orcc	#$1	; FIX UP
1733 0e4d 20 cf              	BRA	UADD1	; GO ADD
1734                         *
1735                         *
1736                         **TENCOM
1737                         * UNSIGNED TEN'S COMPLEMENT OF AX (ALMOST)
1738                         *
1739 0e4f 8e 00 67           TENCOM	LDX	#AX+2	; POINT TO AX
1740 0e52 86 99              TENCO1	lda	#$99
1741 0e54 a0 84              	suba	0,X	; SUBTRACT FROM 99
1742 0e56 a7 84              	sta	0,X	; SAVE
1743 0e58 30 1f              	leax	-1,x
1744 0e5a 8c 00 64           	CPX	#AX-1
1745 0e5d 26 f3              	BNE	TENCO1
1746 0e5f 84 0f              	anda	#$0F	; RESET SIGN
1747 0e61 a7 01              	sta	1,X	; STORE
1748 0e63 39                 	RTS
1749                         *
1750                         *
1751                         ** SET SIN
1752                         * CALCULATE RESULT SIGN
1753                         *
1754 0e64 0f 30              SETSIN	CLR	OVFLBF	; CLEAR OVFL INDICATOR
1755 0e66 96 65              SETSI0	lda	AX	; GET SIGN
1756 0e68 1f 89              	tfr	a,b	; SAVE
1757 0e6a c4 0f              	andb	#$0F	; RESET SIGN
1758 0e6c d7 65              	stb	AX	; PUT BACK
1759 0e6e 97 2f              	sta	AXSIGN	; SAVE SIGN
1760 0e70 98 62              	eora	NUMBER	; FORM NEW SIGN
1761 0e72 97 2e              	sta	SIGN	; SAVE
1762 0e74 d6 62              ABSVAL	ldb	NUMBER	; GET MS BYTE
1763 0e76 c4 0f              	andb	#$0F	; RESET SIGN
1764 0e78 d7 62              	stb	NUMBER	; PUT BACK
1765 0e7a 4d                 	tsta		; TEST NEW SIGN
1766 0e7b 39                 	RTS
1767                         *
1768                         *
1769                         **
1770                         * SUBTRACT AX FROM NUMBER
1771                         *
1772 0e7c 96 62              SUB	lda	NUMBER	; GET MS BYTE
1773 0e7e 88 f0              	eora	#$F0	; CHANGE SIGN
1774 0e80 97 62              	sta	NUMBER	; PUT BACK
1775                         * GO INTO ADD
1776                         *
1777                         *
1778                         * ADD
1779                         * ADD AX TO NUMBER
1780                         *
1781 0e82 8d 87              ADD	BSR	STAKDN
1782 0e84 8d de              	BSR	SETSIN	; GO CALCULATE SIGN
1783 0e86 2a 0a              	BPL	ADD0	; USE EITHER SIGN
1784 0e88 8d bf              	BSR	USUB	; OTHERWISE SUBTRACT
1785 0e8a 1f 8a              	tfr	a,cc	; SET CCR
1786 0e8c 28 09              	BVC	ADD1	; CHECK OVERFLOW
1787 0e8e 03 2f              	COM	AXSIGN	; CHANGE FOR AX SMALLER
1788 0e90 20 0d              	BRA	ADD15
1789 0e92 17 ff 87           ADD0	lbsr	UADD	; GO ADD
1790 0e95 20 0a              	BRA	ADD2	; GO FIX SIGN
1791 0e97 17 ff 71           ADD1	lbsr	STAKDN	; COPY NUMBER TO AX
1792 0e9a bd 03 3a           	JSR	UPSCLR	; RESTORE
1793 0e9d 8d aa              	BSR	USUB	; GO NEGATE
1794 0e9f 0f 30              ADD15	CLR	OVFLBF
1795 0ea1 96 2f              ADD2	lda	AXSIGN	; GET OLD SIGN
1796                         *
1797                         *
1798                         ** FIXSIN
1799                         * SET THE SIGN ON THE RESULT
1800                         *
1801 0ea3 84 f0              FIXSIN	anda	#$F0	; MASK
1802 0ea5 c6 0f              	ldb	#$0F	; SET MASK
1803 0ea7 d4 62              	andb	NUMBER	; RESET SIGN
1804                         ;	ABA	TACK ON SIGN
1805 0ea9 d7 62              	stb	NUMBER
1806 0eab 9b 62              	adda	NUMBER
1807 0ead 97 62              	sta	NUMBER	; PUT BACK
1808 0eaf 39                 FIX2	RTS
1809                         *
1810                         *
1811                         ** MULT
1812                         * MULTIPLY AC BY AX
1813                         *
1814 0eb0 17 ff 58           MULT	lbsr	STAKDN	; MOVE STACK
1815 0eb3 8d af              	BSR	SETSIN	; GO CALC. SIGNS
1816 0eb5 bd 03 3a           MULT0	JSR	UPSCLR	; MOVE STACK UP
1817 0eb8 c6 05              	ldb	#5	; SET COUNTER
1818 0eba 96 5f              MULT1	lda	AC	; GET MS BYTE OF AC
1819 0ebc 27 07              	BEQ	MULT3	; IF ZERO, LOOP
1820 0ebe bd 0e 1c           MULT2	JSR	UADD	; ADD IN AX
1821 0ec1 0a 5f              	dec	AC	; ONCE DONE
1822 0ec3 26 f9              	BNE	MULT2
1823 0ec5 5a                 MULT3	decb		; ONCE DONE
1824 0ec6 27 40              	BEQ	MULT4	; CHECK IF ALL DONE
1825 0ec8 8d 4c              	BSR	ACLEFT	; SHIFT AC LEFT
1826 0eca 96 62              	lda	NUMBER
1827 0ecc bd 0e 37           	JSR	UADD22
1828 0ecf 20 e9              	BRA	MULT1
1829                         *
1830                         *
1831                         ** DIVIDE
1832                         * DIVIDE AC-NUMBER BY AX
1833                         *
1834 0ed1 17 ff 37           DIVIDE	lbsr	STAKDN
1835 0ed4 8e 00 65           	LDX	#AX
1836 0ed7 bd 0f 97           	JSR	ZCHK1	; GO CHECK IF AX=O
1837 0eda 26 09              	BNE	DIVID1	; IF NOT, OK
1838 0edc 86 22              DIVID0	lda	#$22	; SET ERROR
1839 0ede 10 8e 05 7d        	LDY	#ERR22	; POINTER TO MSG
1840 0ee2 7e 0d 22           	JMP	EVAL3
1841 0ee5 bd 0e 64           DIVID1	JSR	SETSIN	; CALC, SIGNS
1842 0ee8 bd 0d fa           	JSR	STAKUP	; PUSH BACK
1843 0eeb 8d 29              	BSR	ACLEFT	; SHIFT DOWN
1844 0eed 6f 02              	CLR	2,X
1845 0eef 6f 03              	CLR	3,X	; ZERO OUT NUMBER
1846 0ef1 c6 05              	ldb	#5	; SET LOOP COUNT
1847 0ef3 8d 21              DIVID2	BSR	ACLEFT	; MOVE AC DOWN
1848 0ef5 bd 0e 4f           DIVI2A	JSR	TENCOM	; TAKE 10'S COMP
1849 0ef8 8d 38              DIVID3	BSR	DADD	; GO SPECIAL ADD
1850 0efa 85 f0              	bita	#$F0	; CHECK FOR OVERFLOW
1851 0efc 26 14              	BNE	DIVID4
1852 0efe bd 0e 4f           	JSR	TENCOM	; IF SO, RESTORE AX
1853 0f01 1c fe              	andcc	#$fe
1854 0f03 8d 2f              	BSR	DADD1	; ADD BACK IN
1855 0f05 5a                 	decb		; ONE PASS MADE
1856 0f06 26 eb              	BNE	DIVID2
1857 0f08 96 2e              MULT4	lda	SIGN	; GET THE SIGN
1858 0f0a 8d 97              	BSR	FIXSIN	; GO FIX UP THE SIGN
1859 0f0c 8e 00 5e           	LDX	#AC-1	; POINT TO AC
1860 0f0f 7e 0e 0e           	JMP	STAKD1	; MOVE STACK BACK
1861 0f12 0c 64              DIVID4	INC	NUMBER+2	; ADD ONE IN
1862 0f14 20 e2              	BRA	DIVID3	; GO DO AGAIN
1863                         *
1864                         *
1865                         ** ACLEFT
1866                         * SHIFT AC-NUMBER LEFT 4 BITS
1867                         *
1868 0f16 86 04              ACLEFT	lda	#4	; SET FOR 4 BITS
1869 0f18 8e 00 64           ACLEF1	LDX	#AX-1	; POINT X
1870 0f1b 1c fe              	andcc	#$fe
1871 0f1d 34 01              	pshs	cc	;
1872                         ACLEF2
1873 0f1f 35 01              	puls	cc	;
1874 0f21 69 84              	ROL	0,X	; ROTATE
1875 0f23 34 01              	pshs	cc	;
1876 0f25 30 1f              	leax	-1,x
1877 0f27 8c 00 5e           	CPX	#AC-1	; CHECK IF DONE
1878 0f2a 26 f3              	BNE	ACLEF2
1879 0f2c 35 01              	puls	cc	;
1880 0f2e 4a                 	deca		; CHECK FOR DONE
1881 0f2f 26 e7              	BNE	ACLEF1
1882 0f31 39                 	RTS
1883                         *
1884                         *
1885                         ** DADD
1886                         * ADD AX TO A C
1887                         *
1888 0f32 1a 01              DADD	orcc	#$1
1889 0f34 8e 00 61           DADD1	LDX	#AC+2
1890 0f37 96 5f              	lda	AC	; GET MS BYTE
1891 0f39 84 0f              	anda	#$0F	; RESET SIGN
1892 0f3b 97 5f              	sta	AC	; STORE BACK
1893 0f3d 34 01              	pshs	cc	;
1894 0f3f a6 84              DADD2	lda	0,X	; GET ADDEND
1895 0f41 35 01              	puls	cc	;
1896 0f43 a9 06              	adca	6,X	; ADD IN
1897 0f45 19                 	DAA
1898 0f46 34 01              	pshs	cc	;
1899 0f48 a7 84              	sta	0,X	; SAVE
1900 0f4a 30 1f              	leax	-1,x
1901 0f4c 8c 00 5e           	CPX	#AC-1	; SEE IF DONE
1902 0f4f 26 ee              	BNE	DADD2
1903 0f51 35 01              	puls	cc	;
1904 0f53 39                 	RTS
1905                         *
1906                         ** SIGNUM
1907                         * CALCULATE SIGNUM FUNCTION
1908                         *
1909 0f54 8d 3e              SIGNUM	BSR	ZCHK	; GO CHECK = O
1910 0f56 27 0b              	BEQ	SIGNU2	; IF SO RESULT =0
1911 0f58 d6 62              	ldb	NUMBER	; OTHERWISE GET SIGN
1912 0f5a 8d 07              SIGNU1	BSR	SIGNU2	; GO CLEAR
1913 0f5c 0c 64              	INC	NUMBER+2	; MAKE = I
1914 0f5e 1f 98              	tfr	b,a	; SET FOR FIXSIN
1915 0f60 7e 0e a3           	JMP	FIXSIN	; GO SET THE SIGN
1916 0f63 7e 03 3d           SIGNU2	JMP	CLRNUM
1917                         *
1918                         *
1919                         ** EXPON
1920                         * CALCULATE EXPONENTIATION
1921                         * ONLY POSITIVE EXPONENTS UP TO 99 ALLOWED
1922                         *
1923 0f66 17 fe a2           EXPON	lbsr	STAKDN	; MOVE OPERANDS DOWN
1924 0f69 5f                 	clrb
1925 0f6a d7 30              	stb	OVFLBF	; CLEAR OVER FLOW
1926 0f6c 96 67              	lda	AX+2	; GET EXPONENT
1927 0f6e 27 ea              	BEQ	SIGNU1	; IF O, GO MAKE RESULT +1
1928 0f70 bd 0d fa           	JSR	STAKUP	; GET TWO COPIES
1929 0f73 17 fe 95           	lbsr	STAKDN	; MOVE DOWN
1930 0f76 8b 99              EXPON1	adda	#$99	; DECREMENT
1931 0f78 19                 	DAA
1932 0f79 27 18              	BEQ	CMPX2	; WHEN 0 ALL DONE
1933 0f7b 34 02              	pshs	A	; SAVE EXP
1934 0f7d bd 0e 66           	JSR	SETSI0	; GO FIX SIGNS
1935 0f80 bd 0e b5           	JSR	MULT0	; GO MULTIPLY
1936 0f83 35 02              	puls	A	; GET EXPONENT
1937 0f85 20 ef              	BRA	EXPON1	; LOOP
1938                         *
1939                         *
1940                         ** CMPX
1941                         * FULL COMPARE ON X
1942                         * COMPARES X WITH CONTENTS OF CPX1
1943                         *
1944 0f87 9f 39              CMPX	STX	CPX2	; SAVE
1945 0f89 96 39              CMPX1	lda	CPX2	; GET MS BYTE
1946 0f8b 91 37              	cmpa	CPX1	; COMPARE
1947 0f8d 26 04              	BNE	CMPX2	; IF NOT EQUAL, DONE
1948 0f8f d6 3a              	ldb	CPX2+1	; GET LS BYTE
1949 0f91 d1 38              	cmpb	CPX1+1	; COMPARE
1950 0f93 39                 CMPX2	RTS		; DONE
1951                         *
1952                         *
1953                         ** ZCHK
1954                         * CHECK OPERAND FOR EQUAL TO 0
1955                         *
1956 0f94 8e 00 62           ZCHK	LDX	#NUMBER
1957 0f97 5f                 ZCHK1	clrb
1958 0f98 6d 02              	TST	2,X
1959 0f9a 26 0e              	BNE	ZCHK2
1960 0f9c 6d 01              	TST	1,X
1961 0f9e 26 0a              	BNE	ZCHK2
1962 0fa0 a6 84              	lda	0,X	; GET MS BYTE
1963 0fa2 84 0f              	anda	#$0F
1964 0fa4 26 04              	BNE	ZCHK2	; CHECK FOR 0
1965 0fa6 a7 84              	sta	0,X	; RESET SIGN BITS
1966 0fa8 c6 04              	ldb	#4
1967 0faa a6 84              ZCHK2	lda	0,X	; GET MS BYTE
1968 0fac 46                 	rora		; MOVE A SIGN BIT TO N
1969 0fad 84 08              	anda	#8	; MASK N BIT
1970                         ;	ABA	MERGE Z AND N
1971 0faf 5d                 	tstb
1972 0fb0 27 02              	beq	ZCHK3
1973 0fb2 8a 04              	ora	#4
1974                         ZCHK3
1975 0fb4 9a 30              	ora	OVFLBF	; ADD IN V
1976 0fb6 1f 8a              	tfr	a,cc	; SET CCR
1977 0fb8 39                 	RTS
1978                         *
1979                         *
1980                         **
1981 0fb9 bd 03 93           SKYCLS	JSR	SKIPSP
1982 0fbc 20 02              	BRA	CLASS1
1983                         *
1984                         *
1985                         **CLASS
1986                         *CLASSIFY A CHARACTER IN THE A ACCUMULATOR
1987                         *CLASSIFICATION RETURNED IN B
1988                         *  0 ERROR
1989                         *  1 TERMINATOR
1990                         *  2 LETTER
1991                         *  3 NUMBER
1992                         *  4 )
1993                         *  5 (
1994                         *  6 +
1995                         *  7 -
1996                         *  8 SGN
1997                         *  9 ABS
1998                         * 10 *
1999                         * 11 /
2000                         * 12 ~
2001 0fbe a6 84              CLASS	lda	0,X	; GET CHAR
2002 0fc0 c6 01              CLASS1	ldb	#1	; SET UP
2003 0fc2 81 0d              	cmpa	#$D	; CHECK FOR CR
2004 0fc4 27 19              	BEQ	CLAS25
2005 0fc6 5a                 	decb
2006 0fc7 34 02              	pshs	A	; SAVE CHAR
2007 0fc9 80 28              CLAS2B	suba	#'(	; REMOVE BIAS
2008 0fcb 2b 10              	BMI	CLASS2	; CHECK ILLEGAL
2009 0fcd 81 18              	cmpa	#'@-'(	; CHECK LIMIT
2010 0fcf 23 0f              	BLS	CLASS3	; NOT LETTER
2011 0fd1 81 32              	cmpa	#'Z-'(	; CHECK FOR LETTER
2012 0fd3 23 06              	BLS	CLAS1B
2013 0fd5 81 36              	cmpa	#'^-'(	; CHECK FOR ILLEGAL
2014 0fd7 26 04              	BNE	CLASS2
2015 0fd9 c6 0a              	ldb	#10	; FIX UP
2016 0fdb cb 02              CLAS1B	addb	#02
2017 0fdd 35 02              CLASS2	puls	A	; RESTORE CHARACTER
2018 0fdf 39                 CLAS25	RTS		; DONE
2019 0fe0 9f 24              CLASS3	STX	XSAVE2	; SAVE X REG
2020 0fe2 8e 0f eb           	LDX	#CLSTBL	; POINT TO TABLE
2021 0fe5 e6 86              	ldb 	a,X
2022 0fe7 9e 24              	LDX	XSAVE2	; RESTORE X REG,
2023 0fe9 20 f2              	BRA	CLASS2
2024 0feb 05 04 0a 06 01 07  CLSTBL	FCB	5,4,10,6,1,7,0,11,3,3,3,3
     00 0b 03 03 03 03
2025 0ff7 03 03 03 03 03 03  	FCB	3,3,3,3,3,3,1,1,1,1,1,8,9
     01 01 01 01 01 08
     09
2026                         *
2027                         *
2028                         * RANDOM GENERATOR
2029                         *
2030 1004 c6 08              RANDOM	ldb	#8	; SET COUNTER
2031 1006 8e 00 00           	LDX	#RNDM
2032 1009 a6 03              RPT	lda	3,X	; GET M.S. BYTE OF RANDOM NO.
2033 100b 48                 	asla		; SHIFT IT LEFT THREE:
2034 100c 48                 	asla		; TIMES TO GET BIT 28
2035 100d 48                 	asla		; IN LINE WITH BIT 31
2036 100e a8 03              	eora	3,X	; XOR A WITH RANDOM NO
2037 1010 48                 	asla		; PUT BIT 28.XOR31 IN
2038 1011 48                 	asla		; CARRY BY SHIFTING LEFT
2039 1012 69 84              	ROL	0,X	; ROTATE ALL FOUR BYTES OF
2040 1014 69 01              	ROL	1,X	; THE RANDOM NO, ROTATING
2041 1016 69 02              	ROL	2,X	; THE CARRY INTO THE LSB
2042 1018 69 03              	ROL	3,X	; THE MSB IS LOST
2043 101a 5a                 	decb		; DECREMENT THE COUNTER
2044 101b 26 ec              	BNE	RPT	; IF ITS NOT O, GO REPEAT
2045 101d a6 84              	lda	0,X	; PUT RANDOM # IN A
2046 101f 81 9f              	cmpa	#$9F	; CHECK IN RANGE
2047 1021 22 e1              	BHI	RANDOM	; IF NOT GET ANOTHER
2048 1023 8b 00              	adda	#0	; SET HALF CARRY
2049 1025 19                 	DAA
2050 1026 39                 	RTS
2051                         
2052 1027                    ENDSTR	RMB	2
2053 1029                    STORSP	EQU	*
2054                         
2055 6f00                    	ORG	EXTERN
2056 6f00 39                 	RTS
2057                         	END

*************************************************
*
*    XPLUSY --
*
*	 THIS MACRO EFFICIENTLY ADDS THE 9-BYTE
*    FRACTION POINTED TO BY XREG TO THAT POINTED
*    TO BY YREG, LEAVING THE RESULT IN FRACTION
*    POINTED TO BY XREG.  CARRY OUT OF HIGH-ORDER
*    BIT IS IN CARRY FLAG.
*
XPLUSY	MACR
  LDD  7,X
  ADDD	7,Y
  STD  7,X
  LDD  5,X
  ADCD	(5,Y)
  STD  5,X
  LDD  3,X
  ADCD	(3,Y)
  STD  3,X
  LDD  1,X
  ADCD	(1,Y)
  STD  1,X
  LDB  0,X
  ADCB 0,Y
  STB  0,X
  ENDM
*
*************************************************
*
*    XSBTRY --
*
*	 MACRO TO SUBTRACT 9-BYTE FRACTION POINTED
*    TO BY Y-REG FROM THAT AT X-REG, RESULT STORED
*    X-REG.  IT IS EFFICIENT.
*
XSBTRY MACR
  LDD  7,X
  SUBD	7,Y
  STD  7,X
  LDD  5,X
  SBCD	(5,Y)
  STD  5,X
  LDD  3,X
  SBCD	(3,Y)
  STD  3,X
  LDD  1,X
  SBCD	(1,Y)
  STD  1,X
  LDB  0,X
  SBCB 0,Y
  STB  0,X
  ENDM
*
************************************************************
*
*  ADCD
*
*      ADCD SIMULATES WHAT WOULD BE THE ACTION OF A
*  ADDD W/ CARRY INSTRUCTION IF IT EXISTED, ALAS IT
*  DOESN'T SO IT IS DONE USING THE ADCA & ADCB INSTRUCTIONS
*
*  TO INVOKE ADCD: ADCD  <ADD. MODE>
*  NOTE: MUST ONLY USE CONSTANT OFFSETS
*
ADCD  MACR
*
  ADCB	(1+\0)
  ADCA	\0
*
 ENDM
*
************************************************************
*
*  SBCD
*
*      SBCD SIMULATES WHAT WOULD BE THE ACTION OF A
*  SUBD W/ CARRY INSTRUCTION IF IT EXISTED, ALAS IT
*  DOESN'T SO IT IS DONE USING THE SBCA & SBCB INSTRUCTIONS
*
*  TO INVOKE SBCD:  SBCD  <ADD. MODE>
*  NOTE: MUST ONLY USE CONSTANT OFFSETS
*
SBCD  MACR
*
  SBCB	(1+\0)
  SBCA	\0
*
 ENDM
*
*

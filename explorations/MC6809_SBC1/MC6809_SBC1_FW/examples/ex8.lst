0001                         ; Interrupt example 2.
0002                         ; Example of receiving characters in an interrupt-driven fashion.
0003                         ;
0004                         ; Uses a 6850 ACIA which must have its INT* line connnected to the
0005                         ; CPU/IRQ line.
0006                         
0007                         ; Equates
0008                         
0009 7f00                    intvec  equ  $7f00              ; Address of IRQ handler in MONDEB.
0010 a000                    aciac   equ  $a000              ; 6850 ACIA status/control register.
0011 a001                    aciad   equ  $a001              ; 6850 ACIA data register.
0012 0000                    eos     equ  $00                ; End of string character (NULL).
0013 000d                    cr      equ  $0d                ; Carriage return.
0014 000a                    nl      equ  $0a                : Newline.
0015                         
0016                         ; Main program
0017                         
0018 1000                            org     $1000
0019                         
0020                         ; Disable interrupts to start.
0021                         
0022 1000 1a 10              start   orcc    #%00010000      ; SEI (mask interrupts).
0023                         
0024                         ; Set up ACIA control register to send interrupts when TDRE true.
0025                         ; Receive interrupt disabled. Output /RTS=low and enable Tx Interrupt.
0026                         ; Data format 8N1. CLK/16
0027                         
0028 1002 86 03                      lda     #3              ; Reset ACIA
0029 1004 b7 a0 00                   sta     aciac
0030 1007 86 95                      lda     #%10010101      ; Control register setting.
0031 1009 b7 a0 00                   sta     aciac           ; Initialize ACIA to 8 bits and no parity.
0032                         
0033                         ; Set IRQ vector to call our handler routine.
0034                         
0035 100c 8e 10 1c                   ldx     #handler        ; This only works with MONDEB monitor.
0036 100f bf 7f 00                   stx     intvec
0037                         
0038                         ; Buffer contains characters entered.
0039                         ; Initialize bufptr to point to start of string.
0040                         
0041 1012 8e 20 02                   ldx     #buffer
0042 1015 bf 20 00                   stx     bufptr
0043                         
0044                         ; Run CWAI # to enable interrupts
0045                         ; Loop back forever
0046                         
0047 1018 3c ef              forever cwai    #%11101111      ; Enable IRQ
0048 101a 20 fc                      bra     forever
0049                         
0050                         ; IRQ Handler:
0051                         
0052                         ; Get serial data. Echo it back.
0053                         ; Write character to buffer.
0054                         ; Increment bufptr to point to next address.
0055                         ; If character was Return or Newline, jump to monitor.
0056                         ; Otherwise, return from interrupt.
0057                         
0058 101c b6 a0 01           handler lda    aciad           ; Get character.
0059 101f b7 a0 01                   sta    aciad           ; Echo character back out.
0060 1022 be 20 00                   ldx    bufptr          ; Get buffer pointer
0061 1025 a7 80                      sta    ,x+             ; Save in buffer and increment pointer.
0062 1027 bf 20 00                   stx    bufptr          ; Save new pointer.
0063                         
0064 102a 81 0d                      cmpa   #cr             ; Carriage return?
0065 102c 27 05                      beq    eol             ; If so, branch.
0066 102e 81 0a                      cmpa   #nl             ; Line feed?
0067 1030 27 01                      beq    eol             ; If so, branch.   
0068 1032 3b                         rti                    ; Return from interrupt.
0069                         
0070 1033 6e 9f ff fe        eol     jmp    [$fffe]         ; Go to monitor via reset vector.
0071                         
0072                         ; Data
0073                         
0074 2000                            org     $2000
0075 2000                    bufptr  rmb     2               ; Pointer to next available point in data buffer.
0076 2002                    buffer  rmb     132             ; Data buffer.
